/* The following code was generated by JFlex 1.4.3 on 16-10-14 ÏÂÎç9:52 */

/*
 * This class provides the capability to slice and splice an article to
 * insert or remove a section of text.  In this case a "section" is
 * defined as a body of text between two heading tags of the same level,
 * such as two &lt;h2&gt; tags.
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16-10-14 ÏÂÎç9:52 from the specification file
 * <tt>D:/work/jamwiki/jamwiki-core/src/main/jflex/jamwiki-spliceprocessor.jflex</tt>
 */
public class JAMWikiSpliceLexer extends AbstractJAMWikiSpliceLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\1\1\0\1\0\23\0\1\5\1\31\1\2\4\0"+
    "\1\3\5\0\1\32\1\0\1\13\1\0\1\12\1\14\1\15\1\16"+
    "\1\17\1\20\3\0\1\6\1\0\1\10\1\7\1\4\2\0\4\6"+
    "\1\30\2\6\1\11\1\24\1\6\1\25\2\6\1\21\1\22\1\26"+
    "\1\6\1\27\4\6\1\23\3\6\6\0\4\6\1\30\2\6\1\11"+
    "\1\24\1\6\1\25\2\6\1\21\1\22\1\26\1\6\1\27\4\6"+
    "\1\23\3\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\20\0\1\2\43\0\1\3\3\0\1\4"+
    "\23\0\1\4\4\0\1\5\40\0\1\6\62\0\1\6"+
    "\3\0\1\7\5\0\1\10\5\0\1\11\5\0\1\12"+
    "\5\0\1\13\5\0\1\14\7\0\1\3\2\0\1\3"+
    "\1\0\1\6\1\15\57\0\1\15\114\0\1\3\1\0"+
    "\1\15\1\16\144\0\1\15\1\16\5\0\1\7\1\0"+
    "\1\7\4\0\1\10\1\0\1\10\4\0\1\11\1\0"+
    "\1\11\4\0\1\12\1\0\1\12\4\0\1\13\1\0"+
    "\1\13\4\0\1\14\1\0\1\14\7\0\1\16\1\17"+
    "\45\0\1\16\1\17\3\0\2\7\3\0\2\10\3\0"+
    "\2\11\3\0\2\12\3\0\2\13\3\0\2\14\1\0"+
    "\1\16\1\17\1\0\2\7\1\0\2\10\1\0\2\11"+
    "\1\0\2\12\1\0\2\13\1\0\2\14\1\0\1\17"+
    "\6\0\1\20\1\17\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\121"+
    "\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a"+
    "\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402"+
    "\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da"+
    "\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597\0\u05b2"+
    "\0\u05cd\0\u05e8\0\u0603\0\121\0\u061e\0\u0639\0\u0654\0\u066f"+
    "\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747"+
    "\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804\0\u081f"+
    "\0\u083a\0\u0855\0\u0870\0\121\0\u088b\0\u08a6\0\u08c1\0\u08dc"+
    "\0\121\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999"+
    "\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56\0\u0a71"+
    "\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u0b2e\0\u0b49"+
    "\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0bd0\0\u0beb\0\u0c06\0\u0c21"+
    "\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9"+
    "\0\u0d14\0\u0d2f\0\u0d4a\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\u0dd1"+
    "\0\u0dec\0\u0e07\0\u0e22\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\u0ea9"+
    "\0\u0ec4\0\u0edf\0\u0efa\0\u0f15\0\u0f30\0\u0f4b\0\u0f66\0\u0f81"+
    "\0\u0f9c\0\u0fb7\0\u0fd2\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059"+
    "\0\u1074\0\u108f\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u1131"+
    "\0\u114c\0\u1167\0\u1182\0\u119d\0\u11b8\0\u11d3\0\u11ee\0\u1209"+
    "\0\121\0\u1224\0\u123f\0\u125a\0\u1275\0\u1290\0\121\0\u12ab"+
    "\0\u12c6\0\u12e1\0\u12fc\0\u1317\0\121\0\u1332\0\u134d\0\u1368"+
    "\0\u1383\0\u139e\0\121\0\u13b9\0\u13d4\0\u13ef\0\u140a\0\u1425"+
    "\0\121\0\u1440\0\u145b\0\u1476\0\u1491\0\u14ac\0\121\0\u14c7"+
    "\0\u14e2\0\u14fd\0\u1518\0\u1533\0\u154e\0\u1569\0\u1569\0\u1584"+
    "\0\u159f\0\u159f\0\u15ba\0\121\0\u15d5\0\u15f0\0\u160b\0\u1626"+
    "\0\u1641\0\u165c\0\u1677\0\u1692\0\u16ad\0\u16c8\0\u16e3\0\u16fe"+
    "\0\u1719\0\u1734\0\u174f\0\u176a\0\u1785\0\u17a0\0\u17bb\0\u17d6"+
    "\0\u17f1\0\u180c\0\u1827\0\u1842\0\u185d\0\u1878\0\u1893\0\u18ae"+
    "\0\u18c9\0\u18e4\0\u18ff\0\u191a\0\u1935\0\u1950\0\u196b\0\u1986"+
    "\0\u19a1\0\u19bc\0\u19d7\0\u19f2\0\u1a0d\0\u1a28\0\u1a43\0\u1a5e"+
    "\0\u1a79\0\u1a94\0\u1aaf\0\u1aca\0\u1ae5\0\u1b00\0\u1b1b\0\u1b36"+
    "\0\u1b51\0\u1b6c\0\u1b87\0\u1ba2\0\u1bbd\0\u1bd8\0\u1bf3\0\u1c0e"+
    "\0\u1c29\0\u1c44\0\u1c5f\0\u1c7a\0\u1c95\0\u1cb0\0\u1ccb\0\u1ce6"+
    "\0\u1d01\0\u1d1c\0\u1d37\0\u1d52\0\u1d6d\0\u1d88\0\u1da3\0\u1dbe"+
    "\0\u1dd9\0\u1df4\0\u1e0f\0\u1e2a\0\u1e45\0\u1e60\0\u1e7b\0\u1e96"+
    "\0\u1eb1\0\u1ecc\0\u1ee7\0\u1f02\0\u1f1d\0\u1f38\0\u1f53\0\u1f6e"+
    "\0\u1f89\0\u1fa4\0\u1fbf\0\u1fda\0\u1ff5\0\u2010\0\u202b\0\u2046"+
    "\0\u2061\0\u207c\0\u2097\0\u20b2\0\u20cd\0\u20e8\0\u2103\0\u211e"+
    "\0\u2139\0\u2154\0\u216f\0\u218a\0\u21a5\0\u21c0\0\u21db\0\u21f6"+
    "\0\u2211\0\u222c\0\u2247\0\u2262\0\u227d\0\u2298\0\u22b3\0\u22ce"+
    "\0\u22e9\0\u22e9\0\u2304\0\u231f\0\u233a\0\u2355\0\u2370\0\u238b"+
    "\0\u23a6\0\u23c1\0\u23dc\0\u23f7\0\u2412\0\u242d\0\u2448\0\u2463"+
    "\0\u247e\0\u2499\0\u24b4\0\u24cf\0\u24ea\0\u2505\0\u2520\0\u253b"+
    "\0\u2556\0\u2571\0\u258c\0\u25a7\0\u25c2\0\u25dd\0\u25f8\0\u2613"+
    "\0\u262e\0\u2649\0\u2664\0\u267f\0\u269a\0\u26b5\0\u26d0\0\u26eb"+
    "\0\u2706\0\u2721\0\u273c\0\u2757\0\u2772\0\u278d\0\u27a8\0\u27c3"+
    "\0\u27de\0\u27f9\0\u2814\0\u282f\0\u284a\0\u2865\0\u2880\0\u289b"+
    "\0\u28b6\0\u28d1\0\u28ec\0\u2907\0\u2922\0\u293d\0\u2958\0\u2973"+
    "\0\u298e\0\u29a9\0\u29c4\0\u29df\0\u29fa\0\u2a15\0\u2a30\0\u2a4b"+
    "\0\u2a66\0\u2a81\0\u2a9c\0\u2ab7\0\u2ad2\0\u2aed\0\u2b08\0\u2b23"+
    "\0\u2b3e\0\u2b59\0\u2b74\0\u2b8f\0\u2baa\0\u2bc5\0\u2be0\0\u2bfb"+
    "\0\u2c16\0\u2c31\0\u2c4c\0\u2c67\0\u2c82\0\u2c9d\0\u2cb8\0\u2cd3"+
    "\0\u2cee\0\u2d09\0\u2d24\0\u2d3f\0\u2d5a\0\u2d75\0\u2d90\0\u2dab"+
    "\0\u2dc6\0\121\0\u2de1\0\u2dfc\0\u2e17\0\u2e32\0\u2e4d\0\u2e68"+
    "\0\u0cde\0\u2e83\0\u0d2f\0\u2e9e\0\u2eb9\0\u2ed4\0\u2eef\0\u0d9b"+
    "\0\u2f0a\0\u0dec\0\u2f25\0\u2f40\0\u2f5b\0\u2f76\0\u0e58\0\u2f91"+
    "\0\u0ea9\0\u2fac\0\u2fc7\0\u2fe2\0\u2ffd\0\u0f15\0\u3018\0\u0f66"+
    "\0\u3033\0\u304e\0\u3069\0\u3084\0\u0fd2\0\u309f\0\u1023\0\u30ba"+
    "\0\u30d5\0\u30f0\0\u310b\0\u108f\0\u3126\0\u10e0\0\u3141\0\u315c"+
    "\0\u3177\0\u3192\0\u31ad\0\u31c8\0\u31e3\0\u31fe\0\u3219\0\u3234"+
    "\0\u324f\0\u326a\0\u3285\0\u32a0\0\u32bb\0\u32d6\0\u32f1\0\u330c"+
    "\0\u3327\0\u3342\0\u335d\0\u3378\0\u3393\0\u33ae\0\u33c9\0\u33e4"+
    "\0\u33ff\0\u341a\0\u3435\0\u3450\0\u346b\0\u3486\0\u34a1\0\u34bc"+
    "\0\u34d7\0\u34f2\0\u350d\0\u3528\0\u3543\0\u355e\0\u3579\0\u3594"+
    "\0\u35af\0\u35ca\0\u35e5\0\u3600\0\u361b\0\u3636\0\u3651\0\u366c"+
    "\0\u3687\0\u02be\0\u1677\0\u36a2\0\u36bd\0\u36d8\0\u02f4\0\u1734"+
    "\0\u36f3\0\u370e\0\u3729\0\u032a\0\u17f1\0\u3744\0\u375f\0\u377a"+
    "\0\u0360\0\u18ae\0\u3795\0\u37b0\0\u37cb\0\u0396\0\u196b\0\u37e6"+
    "\0\u3801\0\u381c\0\u03cc\0\u1a28\0\u3837\0\121\0\u3852\0\u386d"+
    "\0\u0cf9\0\u0d4a\0\u3888\0\u0db6\0\u0e07\0\u38a3\0\u0e73\0\u0ec4"+
    "\0\u38be\0\u0f30\0\u0f81\0\u38d9\0\u0fed\0\u103e\0\u38f4\0\u10aa"+
    "\0\u10fb\0\u390f\0\u392a\0\u3945\0\u3960\0\u397b\0\u3996\0\u39b1"+
    "\0\u39cc\0\121\0\u39e7\0\u1692\0\u174f\0\u180c\0\u18c9\0\u1986"+
    "\0\u1a43\0\121";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\4\1\5\31\4\1\6\1\5\32\4\1\7\22\4"+
    "\44\0\1\10\7\0\1\11\4\0\1\12\2\0\1\13"+
    "\1\0\1\14\1\0\5\14\1\15\23\14\13\0\1\16"+
    "\5\0\1\11\23\0\1\17\1\0\1\20\1\21\1\22"+
    "\1\23\1\24\34\0\1\25\37\0\1\26\35\0\1\27"+
    "\7\14\1\30\23\14\1\31\1\0\5\31\1\32\23\31"+
    "\26\0\1\33\10\0\1\34\1\35\31\0\1\36\1\37"+
    "\31\0\1\40\1\41\31\0\1\42\1\43\31\0\1\44"+
    "\1\45\31\0\1\46\1\47\50\0\1\50\37\0\1\51"+
    "\34\0\1\52\7\31\1\53\23\31\1\54\1\0\5\54"+
    "\1\55\23\54\27\0\1\56\3\0\10\34\1\57\22\34"+
    "\4\0\1\34\1\35\1\60\2\0\1\60\7\0\10\60"+
    "\2\0\10\36\1\61\22\36\4\0\1\36\1\37\1\62"+
    "\2\0\1\62\7\0\10\62\2\0\10\40\1\63\22\40"+
    "\4\0\1\40\1\41\1\64\2\0\1\64\7\0\10\64"+
    "\2\0\10\42\1\65\22\42\4\0\1\42\1\43\1\66"+
    "\2\0\1\66\7\0\10\66\2\0\10\44\1\67\22\44"+
    "\4\0\1\44\1\45\1\70\2\0\1\70\7\0\10\70"+
    "\2\0\10\46\1\71\22\46\4\0\1\46\1\47\1\72"+
    "\2\0\1\72\7\0\10\72\26\0\1\73\12\0\1\74"+
    "\1\75\5\0\1\76\17\0\32\52\1\77\7\31\1\100"+
    "\23\31\7\54\1\101\23\54\1\102\1\0\5\102\1\103"+
    "\23\102\30\0\1\104\2\0\10\34\1\57\2\34\1\105"+
    "\17\34\4\0\1\34\2\60\1\106\1\0\1\60\7\0"+
    "\10\60\2\0\10\36\1\61\2\36\1\107\17\36\4\0"+
    "\1\36\2\62\1\110\1\0\1\62\7\0\10\62\2\0"+
    "\10\40\1\63\2\40\1\111\17\40\4\0\1\40\2\64"+
    "\1\112\1\0\1\64\7\0\10\64\2\0\10\42\1\65"+
    "\2\42\1\113\17\42\4\0\1\42\2\66\1\114\1\0"+
    "\1\66\7\0\10\66\2\0\10\44\1\67\2\44\1\115"+
    "\17\44\4\0\1\44\2\70\1\116\1\0\1\70\7\0"+
    "\10\70\2\0\10\46\1\71\2\46\1\117\17\46\4\0"+
    "\1\46\2\72\1\120\1\0\1\72\7\0\10\72\27\0"+
    "\1\121\11\0\1\74\1\75\1\122\2\0\1\122\1\0"+
    "\1\76\5\0\10\122\6\0\1\74\26\0\32\52\1\123"+
    "\7\0\1\124\23\0\7\54\1\125\23\54\7\102\1\126"+
    "\23\102\1\127\1\0\5\127\1\130\23\127\4\0\1\131"+
    "\26\0\10\34\1\57\1\132\21\34\1\133\1\0\1\134"+
    "\1\135\1\0\1\136\25\133\10\36\1\61\1\137\21\36"+
    "\1\140\1\0\1\141\1\142\1\0\1\143\25\140\10\40"+
    "\1\63\1\144\21\40\1\145\1\0\1\146\1\147\1\0"+
    "\1\150\25\145\10\42\1\65\1\151\21\42\1\152\1\0"+
    "\1\153\1\154\1\0\1\155\25\152\10\44\1\67\1\156"+
    "\21\44\1\157\1\0\1\160\1\161\1\0\1\162\25\157"+
    "\10\46\1\71\1\163\21\46\1\164\1\0\1\165\1\166"+
    "\1\0\1\167\25\164\24\0\1\170\12\0\1\74\2\122"+
    "\1\171\1\0\1\122\1\0\1\76\5\0\10\122\2\0"+
    "\4\52\1\4\25\52\1\123\7\54\1\172\23\54\7\102"+
    "\1\173\23\102\7\127\1\174\23\127\1\175\1\0\5\175"+
    "\1\0\23\175\10\34\1\57\1\34\1\176\20\34\1\133"+
    "\1\0\2\133\1\34\2\133\1\136\23\133\1\134\1\177"+
    "\1\133\1\134\1\200\2\134\1\201\23\134\1\135\1\202"+
    "\1\135\1\133\1\203\2\135\1\204\23\135\1\133\1\0"+
    "\1\134\1\135\1\34\1\136\1\133\1\136\23\133\10\36"+
    "\1\61\3\36\1\205\16\36\1\140\1\0\2\140\1\36"+
    "\2\140\1\143\23\140\1\141\1\206\1\140\1\141\1\207"+
    "\2\141\1\210\23\141\1\142\1\211\1\142\1\140\1\212"+
    "\2\142\1\213\23\142\1\140\1\0\1\141\1\142\1\36"+
    "\1\143\1\140\1\143\23\140\10\40\1\63\4\40\1\214"+
    "\15\40\1\145\1\0\2\145\1\40\2\145\1\150\23\145"+
    "\1\146\1\215\1\145\1\146\1\216\2\146\1\217\23\146"+
    "\1\147\1\220\1\147\1\145\1\221\2\147\1\222\23\147"+
    "\1\145\1\0\1\146\1\147\1\40\1\150\1\145\1\150"+
    "\23\145\10\42\1\65\5\42\1\223\14\42\1\152\1\0"+
    "\2\152\1\42\2\152\1\155\23\152\1\153\1\224\1\152"+
    "\1\153\1\225\2\153\1\226\23\153\1\154\1\227\1\154"+
    "\1\152\1\230\2\154\1\231\23\154\1\152\1\0\1\153"+
    "\1\154\1\42\1\155\1\152\1\155\23\152\10\44\1\67"+
    "\6\44\1\232\13\44\1\157\1\0\2\157\1\44\2\157"+
    "\1\162\23\157\1\160\1\233\1\157\1\160\1\234\2\160"+
    "\1\235\23\160\1\161\1\236\1\161\1\157\1\237\2\161"+
    "\1\240\23\161\1\157\1\0\1\160\1\161\1\44\1\162"+
    "\1\157\1\162\23\157\10\46\1\71\7\46\1\241\12\46"+
    "\1\164\1\0\2\164\1\46\2\164\1\167\23\164\1\165"+
    "\1\242\1\164\1\165\1\243\2\165\1\244\23\165\1\166"+
    "\1\245\1\166\1\164\1\246\2\166\1\247\23\166\1\164"+
    "\1\0\1\165\1\166\1\46\1\167\1\164\1\167\23\164"+
    "\4\0\1\250\26\0\1\251\1\0\1\252\1\253\1\0"+
    "\1\254\25\251\7\0\1\255\23\0\7\102\1\256\23\102"+
    "\7\127\1\257\23\127\7\175\1\260\23\175\4\34\1\261"+
    "\3\34\1\57\22\34\2\177\1\262\30\177\2\200\1\263"+
    "\5\200\1\264\22\200\1\134\1\177\1\134\1\265\1\200"+
    "\1\201\1\134\1\201\23\134\3\202\1\262\27\202\3\203"+
    "\1\263\4\203\1\266\22\203\1\135\1\202\1\265\1\135"+
    "\1\203\1\204\1\135\1\204\23\135\4\36\1\267\3\36"+
    "\1\61\22\36\2\206\1\270\30\206\2\207\1\271\5\207"+
    "\1\272\22\207\1\141\1\206\1\141\1\273\1\207\1\210"+
    "\1\141\1\210\23\141\3\211\1\270\27\211\3\212\1\271"+
    "\4\212\1\274\22\212\1\142\1\211\1\273\1\142\1\212"+
    "\1\213\1\142\1\213\23\142\4\40\1\275\3\40\1\63"+
    "\22\40\2\215\1\276\30\215\2\216\1\277\5\216\1\300"+
    "\22\216\1\146\1\215\1\146\1\301\1\216\1\217\1\146"+
    "\1\217\23\146\3\220\1\276\27\220\3\221\1\277\4\221"+
    "\1\302\22\221\1\147\1\220\1\301\1\147\1\221\1\222"+
    "\1\147\1\222\23\147\4\42\1\303\3\42\1\65\22\42"+
    "\2\224\1\304\30\224\2\225\1\305\5\225\1\306\22\225"+
    "\1\153\1\224\1\153\1\307\1\225\1\226\1\153\1\226"+
    "\23\153\3\227\1\304\27\227\3\230\1\305\4\230\1\310"+
    "\22\230\1\154\1\227\1\307\1\154\1\230\1\231\1\154"+
    "\1\231\23\154\4\44\1\311\3\44\1\67\22\44\2\233"+
    "\1\312\30\233\2\234\1\313\5\234\1\314\22\234\1\160"+
    "\1\233\1\160\1\315\1\234\1\235\1\160\1\235\23\160"+
    "\3\236\1\312\27\236\3\237\1\313\4\237\1\316\22\237"+
    "\1\161\1\236\1\315\1\161\1\237\1\240\1\161\1\240"+
    "\23\161\4\46\1\317\3\46\1\71\22\46\2\242\1\320"+
    "\30\242\2\243\1\321\5\243\1\322\22\243\1\165\1\242"+
    "\1\165\1\323\1\243\1\244\1\165\1\244\23\165\3\245"+
    "\1\320\27\245\3\246\1\321\4\246\1\324\22\246\1\166"+
    "\1\245\1\323\1\166\1\246\1\247\1\166\1\247\23\166"+
    "\10\250\1\325\22\250\1\251\1\0\2\251\1\74\2\251"+
    "\1\254\23\251\1\252\1\326\1\251\1\252\1\327\2\252"+
    "\1\330\23\252\1\253\1\331\1\253\1\251\1\332\2\253"+
    "\1\333\23\253\1\251\1\0\1\252\1\253\1\74\1\254"+
    "\1\251\1\254\23\251\7\0\1\334\23\0\7\102\1\335"+
    "\23\102\7\127\1\336\23\127\7\175\1\337\23\175\4\0"+
    "\1\34\1\60\1\0\1\106\23\0\5\34\1\340\1\34"+
    "\1\341\1\57\22\34\2\200\1\263\5\200\1\264\2\200"+
    "\1\342\17\200\1\265\1\343\1\135\1\134\1\344\2\265"+
    "\1\345\23\265\3\203\1\263\4\203\1\266\2\203\1\346"+
    "\17\203\4\0\1\36\1\62\1\0\1\110\23\0\5\36"+
    "\1\347\1\36\1\350\1\61\22\36\2\207\1\271\5\207"+
    "\1\272\2\207\1\351\17\207\1\273\1\352\1\142\1\141"+
    "\1\353\2\273\1\354\23\273\3\212\1\271\4\212\1\274"+
    "\2\212\1\355\17\212\4\0\1\40\1\64\1\0\1\112"+
    "\23\0\5\40\1\356\1\40\1\357\1\63\22\40\2\216"+
    "\1\277\5\216\1\300\2\216\1\360\17\216\1\301\1\361"+
    "\1\147\1\146\1\362\2\301\1\363\23\301\3\221\1\277"+
    "\4\221\1\302\2\221\1\364\17\221\4\0\1\42\1\66"+
    "\1\0\1\114\23\0\5\42\1\365\1\42\1\366\1\65"+
    "\22\42\2\225\1\305\5\225\1\306\2\225\1\367\17\225"+
    "\1\307\1\370\1\154\1\153\1\371\2\307\1\372\23\307"+
    "\3\230\1\305\4\230\1\310\2\230\1\373\17\230\4\0"+
    "\1\44\1\70\1\0\1\116\23\0\5\44\1\374\1\44"+
    "\1\375\1\67\22\44\2\234\1\313\5\234\1\314\2\234"+
    "\1\376\17\234\1\315\1\377\1\161\1\160\1\u0100\2\315"+
    "\1\u0101\23\315\3\237\1\313\4\237\1\316\2\237\1\u0102"+
    "\17\237\4\0\1\46\1\72\1\0\1\120\23\0\5\46"+
    "\1\u0103\1\46\1\u0104\1\71\22\46\2\243\1\321\5\243"+
    "\1\322\2\243\1\u0105\17\243\1\323\1\u0106\1\166\1\165"+
    "\1\u0107\2\323\1\u0108\23\323\3\246\1\321\4\246\1\324"+
    "\2\246\1\u0109\17\246\10\250\1\325\2\250\1\u010a\17\250"+
    "\2\326\1\u010b\30\326\1\252\1\326\1\252\1\u010c\1\327"+
    "\1\330\1\252\1\330\23\252\3\331\1\u010b\27\331\1\253"+
    "\1\331\1\u010c\1\253\1\332\1\333\1\253\1\333\23\253"+
    "\7\0\1\u010d\23\0\7\127\1\u010e\23\127\7\175\1\u010f"+
    "\23\175\5\34\2\340\1\341\1\57\1\340\7\34\10\340"+
    "\2\34\1\u0110\1\34\1\u0111\1\u0112\1\34\1\u0113\2\u0110"+
    "\1\u0114\22\u0110\2\200\1\263\5\200\1\264\1\u0115\21\200"+
    "\2\343\1\u0116\1\u0117\27\343\2\344\1\u0118\1\u0119\4\344"+
    "\1\u011a\22\344\1\265\1\343\2\265\1\344\1\345\1\265"+
    "\1\345\23\265\3\203\1\263\4\203\1\266\1\u011b\21\203"+
    "\5\36\2\347\1\350\1\61\1\347\7\36\10\347\2\36"+
    "\1\u011c\1\36\1\u011d\1\u011e\1\36\1\u011f\2\u011c\1\u0120"+
    "\22\u011c\2\207\1\271\5\207\1\272\1\u0121\21\207\2\352"+
    "\1\u0122\1\u0123\27\352\2\353\1\u0124\1\u0125\4\353\1\u0126"+
    "\22\353\1\273\1\352\2\273\1\353\1\354\1\273\1\354"+
    "\23\273\3\212\1\271\4\212\1\274\1\u0127\21\212\5\40"+
    "\2\356\1\357\1\63\1\356\7\40\10\356\2\40\1\u0128"+
    "\1\40\1\u0129\1\u012a\1\40\1\u012b\2\u0128\1\u012c\22\u0128"+
    "\2\216\1\277\5\216\1\300\1\u012d\21\216\2\361\1\u012e"+
    "\1\u012f\27\361\2\362\1\u0130\1\u0131\4\362\1\u0132\22\362"+
    "\1\301\1\361\2\301\1\362\1\363\1\301\1\363\23\301"+
    "\3\221\1\277\4\221\1\302\1\u0133\21\221\5\42\2\365"+
    "\1\366\1\65\1\365\7\42\10\365\2\42\1\u0134\1\42"+
    "\1\u0135\1\u0136\1\42\1\u0137\2\u0134\1\u0138\22\u0134\2\225"+
    "\1\305\5\225\1\306\1\u0139\21\225\2\370\1\u013a\1\u013b"+
    "\27\370\2\371\1\u013c\1\u013d\4\371\1\u013e\22\371\1\307"+
    "\1\370\2\307\1\371\1\372\1\307\1\372\23\307\3\230"+
    "\1\305\4\230\1\310\1\u013f\21\230\5\44\2\374\1\375"+
    "\1\67\1\374\7\44\10\374\2\44\1\u0140\1\44\1\u0141"+
    "\1\u0142\1\44\1\u0143\2\u0140\1\u0144\22\u0140\2\234\1\313"+
    "\5\234\1\314\1\u0145\21\234\2\377\1\u0146\1\u0147\27\377"+
    "\2\u0100\1\u0148\1\u0149\4\u0100\1\u014a\22\u0100\1\315\1\377"+
    "\2\315\1\u0100\1\u0101\1\315\1\u0101\23\315\3\237\1\313"+
    "\4\237\1\316\1\u014b\21\237\5\46\2\u0103\1\u0104\1\71"+
    "\1\u0103\7\46\10\u0103\2\46\1\u014c\1\46\1\u014d\1\u014e"+
    "\1\46\1\u014f\2\u014c\1\u0150\22\u014c\2\243\1\321\5\243"+
    "\1\322\1\u0151\21\243\2\u0106\1\u0152\1\u0153\27\u0106\2\u0107"+
    "\1\u0154\1\u0155\4\u0107\1\u0156\22\u0107\1\323\1\u0106\2\323"+
    "\1\u0107\1\u0108\1\323\1\u0108\23\323\3\246\1\321\4\246"+
    "\1\324\1\u0157\21\246\10\250\1\325\10\250\1\u0158\11\250"+
    "\4\0\1\74\1\122\1\0\1\171\3\0\1\76\17\0"+
    "\1\u010c\1\u0159\1\253\1\252\1\u015a\2\u010c\1\u015b\23\u010c"+
    "\7\0\1\u015c\23\0\7\127\1\u015d\23\127\7\175\1\u015e"+
    "\23\175\1\u0110\1\34\2\u0110\1\34\2\u0110\1\u0113\1\u0114"+
    "\22\u0110\1\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f"+
    "\1\u0160\22\u0111\1\u0112\1\203\1\u0112\1\u0110\1\203\2\u0112"+
    "\1\u0161\1\u0162\22\u0112\1\u0110\1\34\1\u0111\1\u0112\1\34"+
    "\1\u0113\1\u0110\1\u0113\1\u0114\23\u0110\1\34\2\u0110\1\34"+
    "\2\u0110\1\u0113\1\u0114\2\u0110\1\u0163\17\u0110\2\200\1\263"+
    "\5\200\1\264\1\200\1\u0164\20\200\3\202\1\262\1\203"+
    "\1\u0165\1\202\1\u0166\23\202\2\177\1\262\1\177\1\200"+
    "\1\u0167\1\177\1\u0168\23\177\3\203\1\263\1\203\1\u0169"+
    "\1\203\1\u016a\1\266\22\203\2\200\1\263\2\200\1\u016b"+
    "\1\200\1\u016c\1\264\22\200\2\344\1\u0118\1\u0119\4\344"+
    "\1\u011a\2\344\1\u016d\17\344\3\203\1\263\4\203\1\266"+
    "\1\203\1\u016e\20\203\1\u011c\1\36\2\u011c\1\36\2\u011c"+
    "\1\u011f\1\u0120\22\u011c\1\u011d\1\207\1\u011c\1\u011d\1\207"+
    "\2\u011d\1\u016f\1\u0170\22\u011d\1\u011e\1\212\1\u011e\1\u011c"+
    "\1\212\2\u011e\1\u0171\1\u0172\22\u011e\1\u011c\1\36\1\u011d"+
    "\1\u011e\1\36\1\u011f\1\u011c\1\u011f\1\u0120\23\u011c\1\36"+
    "\2\u011c\1\36\2\u011c\1\u011f\1\u0120\2\u011c\1\u0173\17\u011c"+
    "\2\207\1\271\5\207\1\272\3\207\1\u0174\16\207\3\211"+
    "\1\270\1\212\1\u0175\1\211\1\u0176\23\211\2\206\1\270"+
    "\1\206\1\207\1\u0177\1\206\1\u0178\23\206\3\212\1\271"+
    "\1\212\1\u0179\1\212\1\u017a\1\274\22\212\2\207\1\271"+
    "\2\207\1\u017b\1\207\1\u017c\1\272\22\207\2\353\1\u0124"+
    "\1\u0125\4\353\1\u0126\2\353\1\u017d\17\353\3\212\1\271"+
    "\4\212\1\274\3\212\1\u017e\16\212\1\u0128\1\40\2\u0128"+
    "\1\40\2\u0128\1\u012b\1\u012c\22\u0128\1\u0129\1\216\1\u0128"+
    "\1\u0129\1\216\2\u0129\1\u017f\1\u0180\22\u0129\1\u012a\1\221"+
    "\1\u012a\1\u0128\1\221\2\u012a\1\u0181\1\u0182\22\u012a\1\u0128"+
    "\1\40\1\u0129\1\u012a\1\40\1\u012b\1\u0128\1\u012b\1\u012c"+
    "\23\u0128\1\40\2\u0128\1\40\2\u0128\1\u012b\1\u012c\2\u0128"+
    "\1\u0183\17\u0128\2\216\1\277\5\216\1\300\4\216\1\u0184"+
    "\15\216\3\220\1\276\1\221\1\u0185\1\220\1\u0186\23\220"+
    "\2\215\1\276\1\215\1\216\1\u0187\1\215\1\u0188\23\215"+
    "\3\221\1\277\1\221\1\u0189\1\221\1\u018a\1\302\22\221"+
    "\2\216\1\277\2\216\1\u018b\1\216\1\u018c\1\300\22\216"+
    "\2\362\1\u0130\1\u0131\4\362\1\u0132\2\362\1\u018d\17\362"+
    "\3\221\1\277\4\221\1\302\4\221\1\u018e\15\221\1\u0134"+
    "\1\42\2\u0134\1\42\2\u0134\1\u0137\1\u0138\22\u0134\1\u0135"+
    "\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190\22\u0135"+
    "\1\u0136\1\230\1\u0136\1\u0134\1\230\2\u0136\1\u0191\1\u0192"+
    "\22\u0136\1\u0134\1\42\1\u0135\1\u0136\1\42\1\u0137\1\u0134"+
    "\1\u0137\1\u0138\23\u0134\1\42\2\u0134\1\42\2\u0134\1\u0137"+
    "\1\u0138\2\u0134\1\u0193\17\u0134\2\225\1\305\5\225\1\306"+
    "\5\225\1\u0194\14\225\3\227\1\304\1\230\1\u0195\1\227"+
    "\1\u0196\23\227\2\224\1\304\1\224\1\225\1\u0197\1\224"+
    "\1\u0198\23\224\3\230\1\305\1\230\1\u0199\1\230\1\u019a"+
    "\1\310\22\230\2\225\1\305\2\225\1\u019b\1\225\1\u019c"+
    "\1\306\22\225\2\371\1\u013c\1\u013d\4\371\1\u013e\2\371"+
    "\1\u019d\17\371\3\230\1\305\4\230\1\310\5\230\1\u019e"+
    "\14\230\1\u0140\1\44\2\u0140\1\44\2\u0140\1\u0143\1\u0144"+
    "\22\u0140\1\u0141\1\234\1\u0140\1\u0141\1\234\2\u0141\1\u019f"+
    "\1\u01a0\22\u0141\1\u0142\1\237\1\u0142\1\u0140\1\237\2\u0142"+
    "\1\u01a1\1\u01a2\22\u0142\1\u0140\1\44\1\u0141\1\u0142\1\44"+
    "\1\u0143\1\u0140\1\u0143\1\u0144\23\u0140\1\44\2\u0140\1\44"+
    "\2\u0140\1\u0143\1\u0144\2\u0140\1\u01a3\17\u0140\2\234\1\313"+
    "\5\234\1\314\6\234\1\u01a4\13\234\3\236\1\312\1\237"+
    "\1\u01a5\1\236\1\u01a6\23\236\2\233\1\312\1\233\1\234"+
    "\1\u01a7\1\233\1\u01a8\23\233\3\237\1\313\1\237\1\u01a9"+
    "\1\237\1\u01aa\1\316\22\237\2\234\1\313\2\234\1\u01ab"+
    "\1\234\1\u01ac\1\314\22\234\2\u0100\1\u0148\1\u0149\4\u0100"+
    "\1\u014a\2\u0100\1\u01ad\17\u0100\3\237\1\313\4\237\1\316"+
    "\6\237\1\u01ae\13\237\1\u014c\1\46\2\u014c\1\46\2\u014c"+
    "\1\u014f\1\u0150\22\u014c\1\u014d\1\243\1\u014c\1\u014d\1\243"+
    "\2\u014d\1\u01af\1\u01b0\22\u014d\1\u014e\1\246\1\u014e\1\u014c"+
    "\1\246\2\u014e\1\u01b1\1\u01b2\22\u014e\1\u014c\1\46\1\u014d"+
    "\1\u014e\1\46\1\u014f\1\u014c\1\u014f\1\u0150\23\u014c\1\46"+
    "\2\u014c\1\46\2\u014c\1\u014f\1\u0150\2\u014c\1\u01b3\17\u014c"+
    "\2\243\1\321\5\243\1\322\7\243\1\u01b4\12\243\3\245"+
    "\1\320\1\246\1\u01b5\1\245\1\u01b6\23\245\2\242\1\320"+
    "\1\242\1\243\1\u01b7\1\242\1\u01b8\23\242\3\246\1\321"+
    "\1\246\1\u01b9\1\246\1\u01ba\1\324\22\246\2\243\1\321"+
    "\2\243\1\u01bb\1\243\1\u01bc\1\322\22\243\2\u0107\1\u0154"+
    "\1\u0155\4\u0107\1\u0156\2\u0107\1\u01bd\17\u0107\3\246\1\321"+
    "\4\246\1\324\7\246\1\u01be\12\246\10\250\1\325\11\250"+
    "\1\u01bf\10\250\2\u0159\1\u01c0\1\u01c1\27\u0159\1\u010c\1\u0159"+
    "\2\u010c\1\u015a\1\u015b\1\u010c\1\u015b\23\u010c\7\0\1\u01c2"+
    "\32\0\1\u01c3\23\0\7\175\1\u01c4\23\175\1\u0111\1\200"+
    "\1\u0111\1\u01c5\1\200\1\u015f\1\u0111\1\u015f\1\u0160\23\u0111"+
    "\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f\1\u0160\2\u0111"+
    "\1\u01c6\17\u0111\1\u0112\1\203\1\u01c5\1\u0112\1\203\1\u0161"+
    "\1\u0112\1\u0161\1\u0162\23\u0112\1\203\1\u0112\1\u0110\1\203"+
    "\2\u0112\1\u0161\1\u0162\2\u0112\1\u01c7\17\u0112\1\u0110\1\34"+
    "\2\u0110\1\34\2\u0110\1\u0113\1\u0114\1\u01c8\21\u0110\2\200"+
    "\1\263\1\200\1\u01c9\3\200\1\264\22\200\3\202\1\262"+
    "\1\203\2\u0165\1\u0166\1\202\1\u0165\7\202\10\u0165\2\202"+
    "\1\135\1\202\1\265\1\135\1\202\1\204\25\135\2\177"+
    "\1\262\1\177\1\200\2\u0167\1\u0168\1\177\1\u0167\7\177"+
    "\10\u0167\2\177\1\134\1\177\1\134\1\265\1\177\1\201"+
    "\25\134\3\203\1\263\1\203\2\u0169\1\u016a\1\266\1\u0169"+
    "\7\203\10\u0169\2\203\1\u0112\1\203\1\u01c5\1\u0112\1\203"+
    "\1\u0161\2\u0112\1\u0162\22\u0112\2\200\1\263\2\200\2\u016b"+
    "\1\u016c\1\264\1\u016b\7\200\10\u016b\2\200\1\u0111\1\200"+
    "\1\u0111\1\u01c5\1\200\1\u015f\2\u0111\1\u0160\22\u0111\2\344"+
    "\1\u0118\1\u0119\4\344\1\u011a\1\u01ca\21\344\3\203\1\263"+
    "\1\u01cb\3\203\1\266\22\203\1\u011d\1\207\1\u011d\1\u01cc"+
    "\1\207\1\u016f\1\u011d\1\u016f\1\u0170\23\u011d\1\207\1\u011c"+
    "\1\u011d\1\207\2\u011d\1\u016f\1\u0170\2\u011d\1\u01cd\17\u011d"+
    "\1\u011e\1\212\1\u01cc\1\u011e\1\212\1\u0171\1\u011e\1\u0171"+
    "\1\u0172\23\u011e\1\212\1\u011e\1\u011c\1\212\2\u011e\1\u0171"+
    "\1\u0172\2\u011e\1\u01ce\17\u011e\1\u011c\1\36\2\u011c\1\36"+
    "\2\u011c\1\u011f\1\u0120\1\u01cf\21\u011c\2\207\1\271\1\207"+
    "\1\u01d0\3\207\1\272\22\207\3\211\1\270\1\212\2\u0175"+
    "\1\u0176\1\211\1\u0175\7\211\10\u0175\2\211\1\142\1\211"+
    "\1\273\1\142\1\211\1\213\25\142\2\206\1\270\1\206"+
    "\1\207\2\u0177\1\u0178\1\206\1\u0177\7\206\10\u0177\2\206"+
    "\1\141\1\206\1\141\1\273\1\206\1\210\25\141\3\212"+
    "\1\271\1\212\2\u0179\1\u017a\1\274\1\u0179\7\212\10\u0179"+
    "\2\212\1\u011e\1\212\1\u01cc\1\u011e\1\212\1\u0171\2\u011e"+
    "\1\u0172\22\u011e\2\207\1\271\2\207\2\u017b\1\u017c\1\272"+
    "\1\u017b\7\207\10\u017b\2\207\1\u011d\1\207\1\u011d\1\u01cc"+
    "\1\207\1\u016f\2\u011d\1\u0170\22\u011d\2\353\1\u0124\1\u0125"+
    "\4\353\1\u0126\1\u01d1\21\353\3\212\1\271\1\u01d2\3\212"+
    "\1\274\22\212\1\u0129\1\216\1\u0129\1\u01d3\1\216\1\u017f"+
    "\1\u0129\1\u017f\1\u0180\23\u0129\1\216\1\u0128\1\u0129\1\216"+
    "\2\u0129\1\u017f\1\u0180\2\u0129\1\u01d4\17\u0129\1\u012a\1\221"+
    "\1\u01d3\1\u012a\1\221\1\u0181\1\u012a\1\u0181\1\u0182\23\u012a"+
    "\1\221\1\u012a\1\u0128\1\221\2\u012a\1\u0181\1\u0182\2\u012a"+
    "\1\u01d5\17\u012a\1\u0128\1\40\2\u0128\1\40\2\u0128\1\u012b"+
    "\1\u012c\1\u01d6\21\u0128\2\216\1\277\1\216\1\u01d7\3\216"+
    "\1\300\22\216\3\220\1\276\1\221\2\u0185\1\u0186\1\220"+
    "\1\u0185\7\220\10\u0185\2\220\1\147\1\220\1\301\1\147"+
    "\1\220\1\222\25\147\2\215\1\276\1\215\1\216\2\u0187"+
    "\1\u0188\1\215\1\u0187\7\215\10\u0187\2\215\1\146\1\215"+
    "\1\146\1\301\1\215\1\217\25\146\3\221\1\277\1\221"+
    "\2\u0189\1\u018a\1\302\1\u0189\7\221\10\u0189\2\221\1\u012a"+
    "\1\221\1\u01d3\1\u012a\1\221\1\u0181\2\u012a\1\u0182\22\u012a"+
    "\2\216\1\277\2\216\2\u018b\1\u018c\1\300\1\u018b\7\216"+
    "\10\u018b\2\216\1\u0129\1\216\1\u0129\1\u01d3\1\216\1\u017f"+
    "\2\u0129\1\u0180\22\u0129\2\362\1\u0130\1\u0131\4\362\1\u0132"+
    "\1\u01d8\21\362\3\221\1\277\1\u01d9\3\221\1\302\22\221"+
    "\1\u0135\1\225\1\u0135\1\u01da\1\225\1\u018f\1\u0135\1\u018f"+
    "\1\u0190\23\u0135\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f"+
    "\1\u0190\2\u0135\1\u01db\17\u0135\1\u0136\1\230\1\u01da\1\u0136"+
    "\1\230\1\u0191\1\u0136\1\u0191\1\u0192\23\u0136\1\230\1\u0136"+
    "\1\u0134\1\230\2\u0136\1\u0191\1\u0192\2\u0136\1\u01dc\17\u0136"+
    "\1\u0134\1\42\2\u0134\1\42\2\u0134\1\u0137\1\u0138\1\u01dd"+
    "\21\u0134\2\225\1\305\1\225\1\u01de\3\225\1\306\22\225"+
    "\3\227\1\304\1\230\2\u0195\1\u0196\1\227\1\u0195\7\227"+
    "\10\u0195\2\227\1\154\1\227\1\307\1\154\1\227\1\231"+
    "\25\154\2\224\1\304\1\224\1\225\2\u0197\1\u0198\1\224"+
    "\1\u0197\7\224\10\u0197\2\224\1\153\1\224\1\153\1\307"+
    "\1\224\1\226\25\153\3\230\1\305\1\230\2\u0199\1\u019a"+
    "\1\310\1\u0199\7\230\10\u0199\2\230\1\u0136\1\230\1\u01da"+
    "\1\u0136\1\230\1\u0191\2\u0136\1\u0192\22\u0136\2\225\1\305"+
    "\2\225\2\u019b\1\u019c\1\306\1\u019b\7\225\10\u019b\2\225"+
    "\1\u0135\1\225\1\u0135\1\u01da\1\225\1\u018f\2\u0135\1\u0190"+
    "\22\u0135\2\371\1\u013c\1\u013d\4\371\1\u013e\1\u01df\21\371"+
    "\3\230\1\305\1\u01e0\3\230\1\310\22\230\1\u0141\1\234"+
    "\1\u0141\1\u01e1\1\234\1\u019f\1\u0141\1\u019f\1\u01a0\23\u0141"+
    "\1\234\1\u0140\1\u0141\1\234\2\u0141\1\u019f\1\u01a0\2\u0141"+
    "\1\u01e2\17\u0141\1\u0142\1\237\1\u01e1\1\u0142\1\237\1\u01a1"+
    "\1\u0142\1\u01a1\1\u01a2\23\u0142\1\237\1\u0142\1\u0140\1\237"+
    "\2\u0142\1\u01a1\1\u01a2\2\u0142\1\u01e3\17\u0142\1\u0140\1\44"+
    "\2\u0140\1\44\2\u0140\1\u0143\1\u0144\1\u01e4\21\u0140\2\234"+
    "\1\313\1\234\1\u01e5\3\234\1\314\22\234\3\236\1\312"+
    "\1\237\2\u01a5\1\u01a6\1\236\1\u01a5\7\236\10\u01a5\2\236"+
    "\1\161\1\236\1\315\1\161\1\236\1\240\25\161\2\233"+
    "\1\312\1\233\1\234\2\u01a7\1\u01a8\1\233\1\u01a7\7\233"+
    "\10\u01a7\2\233\1\160\1\233\1\160\1\315\1\233\1\235"+
    "\25\160\3\237\1\313\1\237\2\u01a9\1\u01aa\1\316\1\u01a9"+
    "\7\237\10\u01a9\2\237\1\u0142\1\237\1\u01e1\1\u0142\1\237"+
    "\1\u01a1\2\u0142\1\u01a2\22\u0142\2\234\1\313\2\234\2\u01ab"+
    "\1\u01ac\1\314\1\u01ab\7\234\10\u01ab\2\234\1\u0141\1\234"+
    "\1\u0141\1\u01e1\1\234\1\u019f\2\u0141\1\u01a0\22\u0141\2\u0100"+
    "\1\u0148\1\u0149\4\u0100\1\u014a\1\u01e6\21\u0100\3\237\1\313"+
    "\1\u01e7\3\237\1\316\22\237\1\u014d\1\243\1\u014d\1\u01e8"+
    "\1\243\1\u01af\1\u014d\1\u01af\1\u01b0\23\u014d\1\243\1\u014c"+
    "\1\u014d\1\243\2\u014d\1\u01af\1\u01b0\2\u014d\1\u01e9\17\u014d"+
    "\1\u014e\1\246\1\u01e8\1\u014e\1\246\1\u01b1\1\u014e\1\u01b1"+
    "\1\u01b2\23\u014e\1\246\1\u014e\1\u014c\1\246\2\u014e\1\u01b1"+
    "\1\u01b2\2\u014e\1\u01ea\17\u014e\1\u014c\1\46\2\u014c\1\46"+
    "\2\u014c\1\u014f\1\u0150\1\u01eb\21\u014c\2\243\1\321\1\243"+
    "\1\u01ec\3\243\1\322\22\243\3\245\1\320\1\246\2\u01b5"+
    "\1\u01b6\1\245\1\u01b5\7\245\10\u01b5\2\245\1\166\1\245"+
    "\1\323\1\166\1\245\1\247\25\166\2\242\1\320\1\242"+
    "\1\243\2\u01b7\1\u01b8\1\242\1\u01b7\7\242\10\u01b7\2\242"+
    "\1\165\1\242\1\165\1\323\1\242\1\244\25\165\3\246"+
    "\1\321\1\246\2\u01b9\1\u01ba\1\324\1\u01b9\7\246\10\u01b9"+
    "\2\246\1\u014e\1\246\1\u01e8\1\u014e\1\246\1\u01b1\2\u014e"+
    "\1\u01b2\22\u014e\2\243\1\321\2\243\2\u01bb\1\u01bc\1\322"+
    "\1\u01bb\7\243\10\u01bb\2\243\1\u014d\1\243\1\u014d\1\u01e8"+
    "\1\243\1\u01af\2\u014d\1\u01b0\22\u014d\2\u0107\1\u0154\1\u0155"+
    "\4\u0107\1\u0156\1\u01ed\21\u0107\3\246\1\321\1\u01ee\3\246"+
    "\1\324\22\246\10\250\1\325\12\250\1\u01ef\7\250\3\331"+
    "\1\u010b\1\332\1\u01f0\1\331\1\u01f1\3\331\1\u01f2\17\331"+
    "\2\326\1\u010b\1\326\1\327\1\u01f3\1\326\1\u01f4\3\326"+
    "\1\u01f5\17\326\7\0\1\u01f6\23\0\7\175\1\u01f7\23\175"+
    "\1\u01c5\1\344\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9"+
    "\22\u01c5\1\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f"+
    "\1\u0160\1\u01fa\21\u0111\1\u0112\1\203\1\u0112\1\u0110\1\203"+
    "\2\u0112\1\u0161\1\u0162\1\u01fb\21\u0112\1\u0110\1\34\2\u0110"+
    "\1\34\2\u0110\1\u0113\1\u0114\1\u0110\1\u01fc\20\u0110\2\344"+
    "\1\u0118\1\u0119\4\344\1\u011a\1\344\1\u01fd\20\344\1\u01cc"+
    "\1\353\1\u011e\1\u011d\1\353\2\u01cc\1\u01fe\1\u01ff\22\u01cc"+
    "\1\u011d\1\207\1\u011c\1\u011d\1\207\2\u011d\1\u016f\1\u0170"+
    "\1\u0200\21\u011d\1\u011e\1\212\1\u011e\1\u011c\1\212\2\u011e"+
    "\1\u0171\1\u0172\1\u0201\21\u011e\1\u011c\1\36\2\u011c\1\36"+
    "\2\u011c\1\u011f\1\u0120\3\u011c\1\u0202\16\u011c\2\353\1\u0124"+
    "\1\u0125\4\353\1\u0126\3\353\1\u0203\16\353\1\u01d3\1\362"+
    "\1\u012a\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\22\u01d3\1\u0129"+
    "\1\216\1\u0128\1\u0129\1\216\2\u0129\1\u017f\1\u0180\1\u0206"+
    "\21\u0129\1\u012a\1\221\1\u012a\1\u0128\1\221\2\u012a\1\u0181"+
    "\1\u0182\1\u0207\21\u012a\1\u0128\1\40\2\u0128\1\40\2\u0128"+
    "\1\u012b\1\u012c\4\u0128\1\u0208\15\u0128\2\362\1\u0130\1\u0131"+
    "\4\362\1\u0132\4\362\1\u0209\15\362\1\u01da\1\371\1\u0136"+
    "\1\u0135\1\371\2\u01da\1\u020a\1\u020b\22\u01da\1\u0135\1\225"+
    "\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190\1\u020c\21\u0135"+
    "\1\u0136\1\230\1\u0136\1\u0134\1\230\2\u0136\1\u0191\1\u0192"+
    "\1\u020d\21\u0136\1\u0134\1\42\2\u0134\1\42\2\u0134\1\u0137"+
    "\1\u0138\5\u0134\1\u020e\14\u0134\2\371\1\u013c\1\u013d\4\371"+
    "\1\u013e\5\371\1\u020f\14\371\1\u01e1\1\u0100\1\u0142\1\u0141"+
    "\1\u0100\2\u01e1\1\u0210\1\u0211\22\u01e1\1\u0141\1\234\1\u0140"+
    "\1\u0141\1\234\2\u0141\1\u019f\1\u01a0\1\u0212\21\u0141\1\u0142"+
    "\1\237\1\u0142\1\u0140\1\237\2\u0142\1\u01a1\1\u01a2\1\u0213"+
    "\21\u0142\1\u0140\1\44\2\u0140\1\44\2\u0140\1\u0143\1\u0144"+
    "\6\u0140\1\u0214\13\u0140\2\u0100\1\u0148\1\u0149\4\u0100\1\u014a"+
    "\6\u0100\1\u0215\13\u0100\1\u01e8\1\u0107\1\u014e\1\u014d\1\u0107"+
    "\2\u01e8\1\u0216\1\u0217\22\u01e8\1\u014d\1\243\1\u014c\1\u014d"+
    "\1\243\2\u014d\1\u01af\1\u01b0\1\u0218\21\u014d\1\u014e\1\246"+
    "\1\u014e\1\u014c\1\246\2\u014e\1\u01b1\1\u01b2\1\u0219\21\u014e"+
    "\1\u014c\1\46\2\u014c\1\46\2\u014c\1\u014f\1\u0150\7\u014c"+
    "\1\u021a\12\u014c\2\u0107\1\u0154\1\u0155\4\u0107\1\u0156\7\u0107"+
    "\1\u021b\12\u0107\10\250\1\325\13\250\1\u021c\6\250\3\331"+
    "\1\u010b\1\332\2\u01f0\1\u01f1\1\331\1\u01f0\1\331\1\u01f2"+
    "\5\331\10\u01f0\2\331\1\253\1\331\1\u010c\1\253\1\331"+
    "\1\333\25\253\3\331\1\u010b\1\332\26\331\2\326\1\u010b"+
    "\1\326\1\327\2\u01f3\1\u01f4\1\326\1\u01f3\1\326\1\u01f5"+
    "\5\326\10\u01f3\2\326\1\252\1\326\1\252\1\u010c\1\326"+
    "\1\330\25\252\2\326\1\u010b\1\326\1\327\26\326\7\0"+
    "\1\u021d\32\0\1\u021e\23\0\1\u01c5\1\344\2\u01c5\1\344"+
    "\1\u01f8\1\u01c5\1\u01f8\1\u01f9\23\u01c5\1\344\1\u0112\1\u0111"+
    "\1\344\2\u01c5\1\u01f8\1\u01f9\2\u01c5\1\u021f\17\u01c5\1\u0111"+
    "\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f\1\u0160\1\u0111"+
    "\1\u0220\20\u0111\1\u0112\1\203\1\u0112\1\u0110\1\203\2\u0112"+
    "\1\u0161\1\u0162\1\u0112\1\u0221\20\u0112\1\u0110\1\34\2\u0110"+
    "\1\u0222\2\u0110\1\u0113\1\u0114\22\u0110\2\344\1\u0118\1\u0119"+
    "\1\u0223\3\344\1\u011a\22\344\1\u01cc\1\353\2\u01cc\1\353"+
    "\1\u01fe\1\u01cc\1\u01fe\1\u01ff\23\u01cc\1\353\1\u011e\1\u011d"+
    "\1\353\2\u01cc\1\u01fe\1\u01ff\2\u01cc\1\u0224\17\u01cc\1\u011d"+
    "\1\207\1\u011c\1\u011d\1\207\2\u011d\1\u016f\1\u0170\3\u011d"+
    "\1\u0225\16\u011d\1\u011e\1\212\1\u011e\1\u011c\1\212\2\u011e"+
    "\1\u0171\1\u0172\3\u011e\1\u0226\16\u011e\1\u011c\1\36\2\u011c"+
    "\1\u0227\2\u011c\1\u011f\1\u0120\22\u011c\2\353\1\u0124\1\u0125"+
    "\1\u0228\3\353\1\u0126\22\353\1\u01d3\1\362\2\u01d3\1\362"+
    "\1\u0204\1\u01d3\1\u0204\1\u0205\23\u01d3\1\362\1\u012a\1\u0129"+
    "\1\362\2\u01d3\1\u0204\1\u0205\2\u01d3\1\u0229\17\u01d3\1\u0129"+
    "\1\216\1\u0128\1\u0129\1\216\2\u0129\1\u017f\1\u0180\4\u0129"+
    "\1\u022a\15\u0129\1\u012a\1\221\1\u012a\1\u0128\1\221\2\u012a"+
    "\1\u0181\1\u0182\4\u012a\1\u022b\15\u012a\1\u0128\1\40\2\u0128"+
    "\1\u022c\2\u0128\1\u012b\1\u012c\22\u0128\2\362\1\u0130\1\u0131"+
    "\1\u022d\3\362\1\u0132\22\362\1\u01da\1\371\2\u01da\1\371"+
    "\1\u020a\1\u01da\1\u020a\1\u020b\23\u01da\1\371\1\u0136\1\u0135"+
    "\1\371\2\u01da\1\u020a\1\u020b\2\u01da\1\u022e\17\u01da\1\u0135"+
    "\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190\5\u0135"+
    "\1\u022f\14\u0135\1\u0136\1\230\1\u0136\1\u0134\1\230\2\u0136"+
    "\1\u0191\1\u0192\5\u0136\1\u0230\14\u0136\1\u0134\1\42\2\u0134"+
    "\1\u0231\2\u0134\1\u0137\1\u0138\22\u0134\2\371\1\u013c\1\u013d"+
    "\1\u0232\3\371\1\u013e\22\371\1\u01e1\1\u0100\2\u01e1\1\u0100"+
    "\1\u0210\1\u01e1\1\u0210\1\u0211\23\u01e1\1\u0100\1\u0142\1\u0141"+
    "\1\u0100\2\u01e1\1\u0210\1\u0211\2\u01e1\1\u0233\17\u01e1\1\u0141"+
    "\1\234\1\u0140\1\u0141\1\234\2\u0141\1\u019f\1\u01a0\6\u0141"+
    "\1\u0234\13\u0141\1\u0142\1\237\1\u0142\1\u0140\1\237\2\u0142"+
    "\1\u01a1\1\u01a2\6\u0142\1\u0235\13\u0142\1\u0140\1\44\2\u0140"+
    "\1\u0236\2\u0140\1\u0143\1\u0144\22\u0140\2\u0100\1\u0148\1\u0149"+
    "\1\u0237\3\u0100\1\u014a\22\u0100\1\u01e8\1\u0107\2\u01e8\1\u0107"+
    "\1\u0216\1\u01e8\1\u0216\1\u0217\23\u01e8\1\u0107\1\u014e\1\u014d"+
    "\1\u0107\2\u01e8\1\u0216\1\u0217\2\u01e8\1\u0238\17\u01e8\1\u014d"+
    "\1\243\1\u014c\1\u014d\1\243\2\u014d\1\u01af\1\u01b0\7\u014d"+
    "\1\u0239\12\u014d\1\u014e\1\246\1\u014e\1\u014c\1\246\2\u014e"+
    "\1\u01b1\1\u01b2\7\u014e\1\u023a\12\u014e\1\u014c\1\46\2\u014c"+
    "\1\u023b\2\u014c\1\u014f\1\u0150\22\u014c\2\u0107\1\u0154\1\u0155"+
    "\1\u023c\3\u0107\1\u0156\22\u0107\10\250\1\325\14\250\1\u023d"+
    "\5\250\7\0\1\u023e\32\0\1\u023f\23\0\1\u01c5\1\344"+
    "\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9\1\u0240\21\u01c5"+
    "\1\u0111\1\200\1\u0110\1\u0111\1\u0241\2\u0111\1\u015f\1\u0160"+
    "\22\u0111\1\u0112\1\203\1\u0112\1\u0110\1\u0242\2\u0112\1\u0161"+
    "\1\u0162\22\u0112\1\u01cc\1\353\1\u011e\1\u011d\1\353\2\u01cc"+
    "\1\u01fe\1\u01ff\1\u0243\21\u01cc\1\u011d\1\207\1\u011c\1\u011d"+
    "\1\u0244\2\u011d\1\u016f\1\u0170\22\u011d\1\u011e\1\212\1\u011e"+
    "\1\u011c\1\u0245\2\u011e\1\u0171\1\u0172\22\u011e\1\u01d3\1\362"+
    "\1\u012a\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\1\u0246\21\u01d3"+
    "\1\u0129\1\216\1\u0128\1\u0129\1\u0247\2\u0129\1\u017f\1\u0180"+
    "\22\u0129\1\u012a\1\221\1\u012a\1\u0128\1\u0248\2\u012a\1\u0181"+
    "\1\u0182\22\u012a\1\u01da\1\371\1\u0136\1\u0135\1\371\2\u01da"+
    "\1\u020a\1\u020b\1\u0249\21\u01da\1\u0135\1\225\1\u0134\1\u0135"+
    "\1\u024a\2\u0135\1\u018f\1\u0190\22\u0135\1\u0136\1\230\1\u0136"+
    "\1\u0134\1\u024b\2\u0136\1\u0191\1\u0192\22\u0136\1\u01e1\1\u0100"+
    "\1\u0142\1\u0141\1\u0100\2\u01e1\1\u0210\1\u0211\1\u024c\21\u01e1"+
    "\1\u0141\1\234\1\u0140\1\u0141\1\u024d\2\u0141\1\u019f\1\u01a0"+
    "\22\u0141\1\u0142\1\237\1\u0142\1\u0140\1\u024e\2\u0142\1\u01a1"+
    "\1\u01a2\22\u0142\1\u01e8\1\u0107\1\u014e\1\u014d\1\u0107\2\u01e8"+
    "\1\u0216\1\u0217\1\u024f\21\u01e8\1\u014d\1\243\1\u014c\1\u014d"+
    "\1\u0250\2\u014d\1\u01af\1\u01b0\22\u014d\1\u014e\1\246\1\u014e"+
    "\1\u014c\1\u0251\2\u014e\1\u01b1\1\u01b2\22\u014e\10\250\1\325"+
    "\13\250\1\u0252\6\250\7\0\1\u0253\23\0\1\u01c5\1\344"+
    "\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9\1\u01c5\1\u0254"+
    "\20\u01c5\1\u01cc\1\353\1\u011e\1\u011d\1\353\2\u01cc\1\u01fe"+
    "\1\u01ff\3\u01cc\1\u0255\16\u01cc\1\u01d3\1\362\1\u012a\1\u0129"+
    "\1\362\2\u01d3\1\u0204\1\u0205\4\u01d3\1\u0256\15\u01d3\1\u01da"+
    "\1\371\1\u0136\1\u0135\1\371\2\u01da\1\u020a\1\u020b\5\u01da"+
    "\1\u0257\14\u01da\1\u01e1\1\u0100\1\u0142\1\u0141\1\u0100\2\u01e1"+
    "\1\u0210\1\u0211\6\u01e1\1\u0258\13\u01e1\1\u01e8\1\u0107\1\u014e"+
    "\1\u014d\1\u0107\2\u01e8\1\u0216\1\u0217\7\u01e8\1\u0259\12\u01e8"+
    "\4\250\1\u025a\3\250\1\325\22\250\7\0\1\u025b\23\0"+
    "\1\u01c5\1\344\1\u0112\1\u0111\1\u025c\2\u01c5\1\u01f8\1\u01f9"+
    "\22\u01c5\1\u01cc\1\353\1\u011e\1\u011d\1\u025d\2\u01cc\1\u01fe"+
    "\1\u01ff\22\u01cc\1\u01d3\1\362\1\u012a\1\u0129\1\u025e\2\u01d3"+
    "\1\u0204\1\u0205\22\u01d3\1\u01da\1\371\1\u0136\1\u0135\1\u025f"+
    "\2\u01da\1\u020a\1\u020b\22\u01da\1\u01e1\1\u0100\1\u0142\1\u0141"+
    "\1\u0260\2\u01e1\1\u0210\1\u0211\22\u01e1\1\u01e8\1\u0107\1\u014e"+
    "\1\u014d\1\u0261\2\u01e8\1\u0216\1\u0217\22\u01e8\7\0\1\u0262"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\20\0\1\11\43\0\1\11\3\0"+
    "\1\1\23\0\1\11\4\0\1\11\40\0\1\1\62\0"+
    "\1\1\3\0\1\11\5\0\1\11\5\0\1\11\5\0"+
    "\1\11\5\0\1\11\5\0\1\11\7\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\57\0\1\1\114\0\1\1"+
    "\1\0\2\1\144\0\1\11\1\1\5\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\7\0\2\1\45\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\1\0\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\6\0\1\11"+
    "\7\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiSpliceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiSpliceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return processHeading(6, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 17: break;
        case 11: 
          { return processHeading(5, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 18: break;
        case 10: 
          { return processHeading(4, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 19: break;
        case 3: 
          { if (allowHTML()) {
            beginState(PRE);
        }
        return returnText(yytext());
          }
        case 20: break;
        case 15: 
          { return processHeading(6, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 21: break;
        case 14: 
          { return processHeading(5, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 22: break;
        case 13: 
          { return processHeading(4, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 23: break;
        case 2: 
          { return processHeading(1, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 24: break;
        case 4: 
          { return processHeading(2, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 25: break;
        case 6: 
          { return processHeading(3, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 26: break;
        case 9: 
          { return processHeading(3, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 27: break;
        case 7: 
          { return processHeading(1, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 28: break;
        case 8: 
          { return processHeading(2, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 29: break;
        case 16: 
          { if (logger.isTraceEnabled()) logger.trace("nowiki: " + yytext() + " (" + yystate() + ")");
        return returnText(yytext());
          }
        case 30: break;
        case 5: 
          { // state only changes to pre if allowHTML() is true, so no need to check here
        endState();
        return returnText(yytext());
          }
        case 31: break;
        case 1: 
          { return returnText(yytext());
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

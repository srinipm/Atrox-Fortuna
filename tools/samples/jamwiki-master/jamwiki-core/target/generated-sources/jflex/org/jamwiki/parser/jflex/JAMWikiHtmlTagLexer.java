/* The following code was generated by JFlex 1.4.3 on 16-10-14 ÏÂÎç9:52 */

/*
 * This class provides capability for parsing HTML or HTML-like tags of the form
 * <tag attribute="value">.  While it generates the HTML markup for the tag, it is
 * most useful as a tool to build an HtmlTagItem object that can then be further
 * processed.
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16-10-14 ÏÂÎç9:52 from the specification file
 * <tt>D:/work/jamwiki/jamwiki-core/src/main/jflex/jamwiki-html-processor.jflex</tt>
 */
public class JAMWikiHtmlTagLexer extends AbstractJAMWikiHtmlTagLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int UL_ATTRIBUTE_KEY = 46;
  public static final int INS_DEL_ATTRIBUTE_KEY = 22;
  public static final int PRE_ATTRIBUTE_KEY = 30;
  public static final int TABLE_COL_ATTRIBUTE_KEY = 40;
  public static final int ATTRS_ATTRIBUTE_KEY = 2;
  public static final int TABLE_SECTION_ATTRIBUTE_KEY = 44;
  public static final int NON_HTML_ATTRIBUTE_KEY = 26;
  public static final int HTML_ATTRIBUTE_VALUE = 16;
  public static final int TABLE_CELL_ATTRIBUTE_KEY = 38;
  public static final int LI_ATTRIBUTE_KEY = 24;
  public static final int TABLE_CAPTION_ATTRIBUTE_KEY = 36;
  public static final int HTML_CLOSE = 18;
  public static final int ATTRS_TEXTALIGN_ATTRIBUTE_KEY = 4;
  public static final int OL_ATTRIBUTE_KEY = 28;
  public static final int BLOCKQUOTE_ATTRIBUTE_KEY = 6;
  public static final int TABLE_ATTRIBUTE_KEY = 34;
  public static final int SCRIPT_ATTRIBUTE_KEY = 32;
  public static final int HTML_OPEN = 20;
  public static final int DL_ATTRIBUTE_KEY = 10;
  public static final int TABLE_ROW_ATTRIBUTE_KEY = 42;
  public static final int FONT_ATTRIBUTE_KEY = 12;
  public static final int HR_ATTRIBUTE_KEY = 14;
  public static final int YYINITIAL = 0;
  public static final int BR_ATTRIBUTE_KEY = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  2,  2, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\37\1\0\1\1\23\0\1\1\1\0\1\42\4\0"+
    "\1\43\5\0\1\35\1\0\1\41\1\35\1\33\1\33\1\33\1\33"+
    "\1\33\1\33\3\35\1\17\1\0\1\36\1\44\1\40\2\0\1\6"+
    "\1\23\1\4\1\3\1\12\1\31\1\14\1\30\1\2\1\45\1\22"+
    "\1\5\1\16\1\13\1\21\1\26\1\34\1\20\1\7\1\10\1\24"+
    "\1\27\1\25\1\15\1\11\1\32\4\0\1\35\1\0\1\6\1\23"+
    "\1\4\1\3\1\12\1\31\1\14\1\30\1\2\1\45\1\22\1\5"+
    "\1\16\1\13\1\21\1\26\1\34\1\20\1\7\1\10\1\24\1\27"+
    "\1\25\1\15\1\11\1\32\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\2\1\2\2\11\3\1\4\1\2\1\5\11\3"+
    "\1\6\4\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\4\16\1\15\4\16\3\15\3\16\3\3\1\17\27\3"+
    "\5\0\1\17\7\3\1\0\1\20\11\3\1\0\1\21"+
    "\1\0\2\16\1\15\13\16\1\15\6\16\31\3\1\22"+
    "\3\0\17\3\2\16\1\15\11\16\25\3\2\0\1\23"+
    "\2\0\7\3\10\16\2\3\1\0\2\3\1\0\3\3"+
    "\1\17\3\3\3\0\6\3\3\16\1\3\1\0\10\3"+
    "\3\0\5\3\2\16\1\0\5\3\3\0\1\24\3\3"+
    "\2\16\1\0\2\3\1\25\1\0\1\17\4\3\1\0"+
    "\1\3\1\0\1\26\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u036a\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u036a\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u03b6\0\u0532\0\u06fa\0\u0720\0\u036a\0\u036a\0\u0746"+
    "\0\u036a\0\u036a\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u08c2\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94"+
    "\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4"+
    "\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0390\0\u0da8\0\u0dce"+
    "\0\u0df4\0\u03b6\0\u0474\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0532\0\u036a\0\u0f24\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u06fa\0\u036a\0\u0720"+
    "\0\u107a\0\u10a0\0\u0876\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e"+
    "\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e"+
    "\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be"+
    "\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee"+
    "\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8\0\u161e"+
    "\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u0da8\0\u1728"+
    "\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858"+
    "\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988"+
    "\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8"+
    "\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8"+
    "\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18"+
    "\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48"+
    "\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u036a\0\u1f06\0\u1f2c\0\u1f52"+
    "\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082"+
    "\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2"+
    "\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2"+
    "\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412"+
    "\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542"+
    "\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672"+
    "\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2"+
    "\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2"+
    "\0\u28f8\0\u291e\0\u2944\0\u296a\0\u0474\0\u2990\0\u29b6\0\u29dc"+
    "\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u291e\0\u2ac0\0\u036a"+
    "\0\u2ae6\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca\0\u036a"+
    "\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88\0\u2cae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\36\30\1\31\1\0\6\30\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\4\40\1\43\1\40"+
    "\1\32\1\40\1\44\11\40\1\32\1\40\2\32\1\0"+
    "\1\45\1\46\2\32\1\47\1\40\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\50\1\41\1\42\4\40\1\43"+
    "\1\40\1\32\1\40\1\44\11\40\1\32\1\40\2\32"+
    "\1\0\1\45\1\46\2\32\1\47\1\40\1\32\1\33"+
    "\1\34\1\35\1\51\1\37\1\40\1\41\1\42\4\40"+
    "\1\43\1\40\1\32\1\40\1\44\11\40\1\32\1\40"+
    "\2\32\1\0\1\45\1\46\2\32\1\47\1\40\1\32"+
    "\1\33\1\34\1\40\1\52\2\40\1\41\1\42\6\40"+
    "\1\32\13\40\1\32\1\40\2\32\1\0\1\45\1\46"+
    "\2\32\1\47\1\40\1\32\1\33\1\34\1\35\1\53"+
    "\1\37\1\40\1\41\1\42\4\40\1\43\1\40\1\32"+
    "\1\40\1\44\11\40\1\32\1\40\2\32\1\0\1\45"+
    "\1\46\2\32\1\47\1\40\1\32\1\33\1\34\1\35"+
    "\1\54\1\37\1\40\1\55\1\42\4\40\1\43\1\40"+
    "\1\32\11\40\1\56\1\40\1\32\1\40\2\32\1\0"+
    "\1\45\1\46\2\32\1\47\1\40\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\50\1\55\1\42\2\40\1\57"+
    "\1\40\1\43\1\40\1\32\1\40\1\44\3\40\1\60"+
    "\5\40\1\32\1\40\2\32\1\0\1\45\1\46\2\32"+
    "\1\47\1\40\1\61\1\62\36\61\1\45\1\63\1\64"+
    "\1\65\2\61\1\66\1\67\34\70\1\66\1\0\1\71"+
    "\4\66\1\70\1\72\1\67\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\6\102\1\104\1\102"+
    "\1\105\1\106\1\102\1\107\1\110\1\111\1\112\4\102"+
    "\1\72\1\0\5\72\1\102\1\32\1\33\1\34\1\113"+
    "\1\51\1\37\1\40\1\41\1\42\4\40\1\43\1\40"+
    "\1\32\1\40\1\44\11\40\1\32\1\40\2\32\1\0"+
    "\1\45\1\46\2\32\1\47\1\40\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\114\4\40\1\43"+
    "\1\40\1\32\1\40\1\44\5\40\1\115\3\40\1\32"+
    "\1\40\2\32\1\0\1\45\1\46\2\32\1\47\1\40"+
    "\1\32\1\33\34\116\1\32\1\0\1\45\1\46\2\32"+
    "\1\47\1\116\1\32\1\33\1\34\1\35\1\53\1\37"+
    "\1\40\1\117\1\114\4\40\1\43\1\40\1\32\1\40"+
    "\1\44\11\40\1\32\1\40\2\32\1\0\1\45\1\46"+
    "\2\32\1\47\1\40\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\4\40\1\120\1\40\1\32"+
    "\1\40\1\44\3\40\1\60\5\40\1\32\1\40\2\32"+
    "\1\0\1\45\1\46\2\32\1\47\1\40\1\32\1\33"+
    "\1\34\1\121\1\122\1\123\1\40\1\124\1\125\4\40"+
    "\1\126\1\40\1\32\13\40\1\32\1\40\2\32\1\0"+
    "\1\45\1\46\2\32\1\47\1\40\1\32\1\33\1\34"+
    "\1\35\1\127\1\37\1\50\1\130\1\42\4\40\1\43"+
    "\1\40\1\32\1\131\1\44\1\40\1\132\1\40\1\60"+
    "\3\40\1\133\1\40\1\32\1\40\2\32\1\0\1\45"+
    "\1\46\2\32\1\47\1\40\1\32\1\33\1\34\1\35"+
    "\1\134\1\37\1\135\1\136\1\42\2\40\1\137\1\40"+
    "\1\43\1\40\1\32\1\140\1\44\1\40\1\141\1\40"+
    "\1\60\1\40\1\142\1\143\2\40\1\32\1\40\2\32"+
    "\1\0\1\45\1\46\2\32\1\47\1\40\1\32\1\33"+
    "\1\34\1\35\1\144\1\37\1\50\1\145\1\42\4\40"+
    "\1\43\1\40\1\32\1\40\1\44\3\40\1\60\1\40"+
    "\1\142\3\40\1\32\1\40\2\32\1\0\1\45\1\46"+
    "\2\32\1\47\1\40\1\32\1\33\1\34\1\35\1\144"+
    "\1\37\1\50\1\41\1\42\4\40\1\43\1\40\1\32"+
    "\1\40\1\44\1\40\1\141\3\40\1\142\3\40\1\32"+
    "\1\40\2\32\1\0\1\45\1\46\2\32\1\47\1\40"+
    "\1\32\1\33\1\34\1\35\1\144\1\37\1\50\1\41"+
    "\1\42\4\40\1\43\1\40\1\32\1\40\1\44\5\40"+
    "\1\142\3\40\1\32\1\40\2\32\1\0\1\45\1\46"+
    "\2\32\1\47\1\40\1\32\1\33\1\34\1\35\1\53"+
    "\1\37\1\40\1\41\1\114\4\40\1\43\1\40\1\32"+
    "\1\40\1\44\11\40\1\32\1\40\2\32\1\0\1\45"+
    "\1\46\2\32\1\47\1\40\47\0\1\146\5\147\1\150"+
    "\26\147\3\0\1\151\3\0\1\147\1\0\1\152\36\0"+
    "\1\45\7\0\1\40\1\153\13\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\1\154\14\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\3\40\1\155\11\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\4\40"+
    "\1\156\10\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\6\40\1\157\6\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\1\160\14\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\14\40\1\161\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\11\40\1\162\3\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\1\0\1\163"+
    "\36\0\1\164\6\0\1\47\46\0\3\40\1\165\11\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\1\166"+
    "\2\40\1\155\11\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\3\40\1\167\11\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\3\40\1\155\11\40\1\0"+
    "\1\40\1\170\11\40\1\0\1\40\10\0\1\40\2\0"+
    "\3\40\1\155\11\40\1\0\1\40\1\171\11\40\1\0"+
    "\1\40\10\0\1\40\2\0\1\172\5\40\1\157\6\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\4\40"+
    "\1\173\10\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\1\40\1\174\11\40\1\0\1\40"+
    "\10\0\1\40\2\0\1\175\14\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\1\61\1\0\36\61\4\0\2\61"+
    "\42\176\1\177\3\176\43\200\1\177\2\200\2\0\34\70"+
    "\7\0\1\70\2\0\11\102\1\201\22\102\7\0\1\102"+
    "\2\0\1\202\1\203\1\102\1\203\2\102\1\203\1\102"+
    "\1\104\23\102\7\0\1\102\2\0\1\204\3\102\1\205"+
    "\3\102\1\206\6\102\1\207\14\102\7\0\1\102\2\0"+
    "\1\203\33\102\7\0\1\102\2\0\21\102\1\210\12\102"+
    "\7\0\1\102\2\0\6\102\1\211\5\102\1\212\5\102"+
    "\1\213\1\102\1\214\7\102\7\0\1\102\2\0\1\102"+
    "\1\203\2\102\1\215\1\102\1\203\7\102\1\203\2\102"+
    "\1\216\4\102\1\217\1\220\4\102\7\0\1\102\2\0"+
    "\34\102\7\0\1\102\2\0\14\102\1\203\17\102\7\0"+
    "\1\102\2\0\3\102\1\203\30\102\7\0\1\102\2\0"+
    "\1\221\2\102\1\222\12\102\1\203\15\102\7\0\1\102"+
    "\2\0\16\102\1\223\15\102\7\0\1\102\2\0\4\102"+
    "\1\224\27\102\7\0\1\102\2\0\16\102\1\203\12\102"+
    "\1\203\2\102\7\0\1\102\2\0\17\102\1\225\14\102"+
    "\7\0\1\102\2\0\1\154\3\40\1\226\10\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\1\160\6\40"+
    "\1\227\5\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\230\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\34\116\7\0\1\116\2\0\6\40"+
    "\1\231\6\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\14\40\1\232\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\10\40\1\233\4\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\15\40\1\0\10\40\1\234"+
    "\2\40\1\0\1\40\10\0\1\40\2\0\4\40\1\235"+
    "\10\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\1\236\12\40\1\0\1\40\10\0\1\40"+
    "\2\0\7\40\1\227\5\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\14\40\1\237\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\3\40\1\155\4\40\1\240"+
    "\4\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\6\40\1\157\6\40\1\0\4\40\1\241\6\40\1\0"+
    "\1\40\10\0\1\40\2\0\15\40\1\0\4\40\1\242"+
    "\6\40\1\0\1\40\10\0\1\40\2\0\12\40\1\243"+
    "\2\40\1\0\1\40\1\244\11\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\1\245\12\40\1\0\1\40"+
    "\10\0\1\40\2\0\3\40\1\155\11\40\1\0\1\40"+
    "\1\246\6\40\1\247\2\40\1\0\1\40\10\0\1\40"+
    "\2\0\3\40\1\165\7\40\1\250\1\40\1\0\3\40"+
    "\1\251\7\40\1\0\1\40\10\0\1\40\2\0\2\40"+
    "\1\252\3\40\1\157\6\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\15\40\1\0\1\40\1\253\11\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\0\1\40"+
    "\1\254\11\40\1\0\1\40\10\0\1\40\2\0\12\40"+
    "\1\243\2\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\50\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\10\40\1\255\4\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\3\40\1\155\11\40"+
    "\1\0\10\40\1\247\2\40\1\0\1\40\10\0\1\40"+
    "\2\0\6\40\1\157\6\40\1\0\6\40\1\256\4\40"+
    "\1\0\1\40\10\0\1\40\37\147\1\0\1\257\11\147"+
    "\1\260\32\147\1\0\1\257\5\147\1\0\1\151\5\261"+
    "\1\262\26\261\7\0\1\261\2\0\15\40\1\0\1\153"+
    "\12\40\1\0\1\40\10\0\1\40\2\0\4\40\1\263"+
    "\10\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\11\40\1\264\3\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\7\40\1\265\5\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\6\40\1\265\6\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\3\40\1\266"+
    "\11\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\1\40\1\267\1\270\11\40\1\271\1\0\2\40\1\272"+
    "\10\40\1\0\1\40\10\0\1\40\2\0\1\273\14\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\6\40"+
    "\1\274\6\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\263\3\40\1\275\4\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\14\40\1\276\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\3\40\1\277"+
    "\11\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\12\40\1\274\1\0\1\40\10\0\1\40"+
    "\2\0\2\40\1\274\12\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\5\40\1\300\7\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\1\40\1\301\13\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\5\102"+
    "\1\203\26\102\7\0\1\102\2\0\25\102\1\203\6\102"+
    "\7\0\1\102\2\0\6\102\1\223\25\102\7\0\1\102"+
    "\2\0\24\102\1\302\7\102\7\0\1\102\2\0\11\102"+
    "\1\303\22\102\7\0\1\102\2\0\1\102\1\223\1\102"+
    "\1\304\30\102\7\0\1\102\2\0\21\102\1\224\12\102"+
    "\7\0\1\102\2\0\16\102\1\305\15\102\7\0\1\102"+
    "\2\0\4\102\1\306\27\102\7\0\1\102\2\0\21\102"+
    "\1\203\2\102\1\203\7\102\7\0\1\102\2\0\4\102"+
    "\1\307\27\102\7\0\1\102\2\0\21\102\1\310\12\102"+
    "\7\0\1\102\2\0\17\102\1\311\14\102\7\0\1\102"+
    "\2\0\10\102\1\312\23\102\7\0\1\102\2\0\17\102"+
    "\1\313\14\102\7\0\1\102\2\0\12\102\1\203\21\102"+
    "\7\0\1\102\2\0\17\102\1\314\14\102\7\0\1\102"+
    "\2\0\10\102\1\203\23\102\7\0\1\102\2\0\16\102"+
    "\1\203\15\102\7\0\1\102\2\0\11\102\1\315\22\102"+
    "\7\0\1\102\2\0\6\40\1\316\6\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\0\6\40"+
    "\1\274\4\40\1\0\1\40\10\0\1\40\2\0\3\40"+
    "\1\317\11\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\320\2\40\1\265\5\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\3\40\1\321\11\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\11\40\1\322\1\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\323\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\11\40\1\324\3\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\2\40\1\153\12\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\3\40"+
    "\1\325\11\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\3\40\1\326\11\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\14\40\1\327\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\3\40\1\330\11\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\2\40\1\331"+
    "\12\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\1\332\12\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\333\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\3\40\1\334\11\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\4\40\1\335\10\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\1\336"+
    "\14\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\3\40\1\154\7\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\1\40\1\227\11\40\1\0"+
    "\1\40\10\0\1\40\2\0\15\40\1\0\5\40\1\337"+
    "\5\40\1\0\1\40\10\0\1\40\2\0\15\40\1\0"+
    "\5\40\1\334\5\40\1\0\1\40\10\0\1\40\2\0"+
    "\1\340\3\40\1\341\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\4\40\1\342\10\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\20\147\1\343\16\147\1\0"+
    "\1\257\5\147\1\0\1\344\34\261\2\0\1\345\4\0"+
    "\1\261\1\0\1\344\2\261\1\346\31\261\2\0\1\345"+
    "\4\0\1\261\2\0\5\40\1\336\7\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\12\40\1\153\2\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\3\40"+
    "\1\274\11\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\347\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\3\40\1\350\7\40\1\0\1\40"+
    "\10\0\1\40\2\0\3\40\1\351\11\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\0\1\40"+
    "\1\352\11\40\1\0\1\40\10\0\1\40\2\0\10\40"+
    "\1\353\4\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\12\40\1\342\2\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\10\40\1\153\4\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\4\40\1\154\10\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\6\40\1\354\4\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\1\40\1\154\11\40\1\0\1\40"+
    "\10\0\1\40\2\0\15\40\1\0\10\40\1\355\2\40"+
    "\1\0\1\40\10\0\1\40\2\0\6\40\1\356\6\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\6\102"+
    "\1\357\25\102\7\0\1\102\2\0\6\102\1\360\25\102"+
    "\7\0\1\102\2\0\12\102\1\361\21\102\7\0\1\102"+
    "\2\0\1\362\16\102\1\363\14\102\7\0\1\102\2\0"+
    "\3\102\1\104\30\102\7\0\1\102\2\0\11\102\1\203"+
    "\22\102\7\0\1\102\2\0\3\102\1\223\30\102\7\0"+
    "\1\102\2\0\1\102\1\364\32\102\7\0\1\102\2\0"+
    "\4\102\1\365\27\102\7\0\1\102\2\0\17\102\1\315"+
    "\14\102\7\0\1\102\2\0\2\102\1\366\31\102\7\0"+
    "\1\102\2\0\6\102\1\203\25\102\7\0\1\102\2\0"+
    "\10\40\1\367\4\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\4\40\1\274\6\40\1\0"+
    "\1\40\10\0\1\40\2\0\15\40\1\0\1\370\12\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\371\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\10\40\1\154\4\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\1\372\12\40\1\0\1\40\10\0\1\40\2\0"+
    "\12\40\1\373\2\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\374\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\3\40\1\375\11\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\14\40\1\376\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\10\40\1\336\4\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\1\40\1\171\11\40\1\0\1\40\10\0\1\40"+
    "\2\0\1\40\1\322\13\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\14\40\1\274\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\5\40\1\377\7\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\15\40\1\0"+
    "\1\u0100\12\40\1\0\1\40\10\0\1\40\2\0\5\40"+
    "\1\153\7\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\1\u0101\12\40\1\0\1\40\10\0"+
    "\1\40\2\0\12\40\1\u0102\2\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\1\40\1\u0103\13\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\11\40\1\153"+
    "\3\40\1\0\13\40\1\0\1\40\10\0\1\40\2\147"+
    "\1\u0104\34\147\1\0\1\257\5\147\1\0\1\344\36\0"+
    "\1\345\6\0\1\344\16\261\1\u0105\15\261\2\0\1\345"+
    "\4\0\1\261\5\0\1\u0106\42\0\3\40\1\u0107\11\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\1\u0108"+
    "\14\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\4\40\1\u0109\6\40\1\0\1\40\10\0"+
    "\1\40\2\0\7\40\1\u010a\5\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\4\40\1\u010b\10\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\4\40\1\u010c"+
    "\10\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\10\40\1\153\2\40\1\0\1\40\10\0"+
    "\1\40\2\0\1\u010d\33\102\7\0\1\102\2\0\10\102"+
    "\1\224\23\102\7\0\1\102\2\0\16\102\1\u010e\15\102"+
    "\7\0\1\102\2\0\20\102\1\223\13\102\7\0\1\102"+
    "\2\0\11\102\1\221\22\102\7\0\1\102\2\0\7\102"+
    "\1\203\24\102\7\0\1\102\2\0\1\102\1\203\32\102"+
    "\7\0\1\102\2\0\20\102\1\u010f\13\102\7\0\1\102"+
    "\2\0\6\40\1\u0110\6\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\6\40\1\153\6\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\5\0\1\u0106\1\0\1\u0111"+
    "\40\0\5\40\1\u0112\7\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\15\40\1\0\4\40\1\u0113\6\40"+
    "\1\0\1\40\10\0\1\40\7\0\1\u0111\40\0\5\40"+
    "\1\u0114\7\40\1\0\6\40\1\u0115\4\40\1\0\1\40"+
    "\10\0\1\40\2\0\4\40\1\u0116\10\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\0\6\40"+
    "\1\256\4\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\1\40\1\u0117\11\40\1\0\1\40\10\0\1\40"+
    "\2\0\4\40\1\u0118\10\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\15\40\1\0\10\40\1\370\2\40"+
    "\1\0\1\40\10\0\1\40\2\0\10\40\1\u0119\4\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\26\147\1\u011a"+
    "\10\147\1\0\1\257\5\147\1\0\1\344\1\u011b\33\261"+
    "\2\0\1\345\4\0\1\261\6\0\1\u011c\41\0\2\40"+
    "\1\270\12\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\2\0\2\40\1\u011d\12\40\1\0\13\40\1\0\1\40"+
    "\10\0\1\40\2\0\5\40\1\u011e\7\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\1\40\1\u011f\13\40"+
    "\1\0\4\40\1\u0120\1\40\1\u0121\4\40\1\0\1\40"+
    "\10\0\1\40\2\0\2\40\1\370\12\40\1\0\13\40"+
    "\1\0\1\40\10\0\1\40\2\0\1\40\1\274\13\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\17\102"+
    "\1\307\14\102\7\0\1\102\2\0\17\102\1\u0122\14\102"+
    "\7\0\1\102\2\0\32\102\1\u0123\1\102\7\0\1\102"+
    "\2\0\1\333\14\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\26\0\1\u0124\21\0\10\40\1\370\4\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\4\40\1\u0125"+
    "\10\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\15\40\1\0\6\40\1\u0126\4\40\1\0\1\40\10\0"+
    "\1\40\2\0\4\40\1\u0127\10\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\15\40\1\0\1\u0128\12\40"+
    "\1\0\1\40\10\0\1\40\2\0\15\40\1\0\11\40"+
    "\1\u0129\1\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\6\40\1\153\4\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\1\336\12\40\1\0\1\40\10\0"+
    "\1\40\10\147\1\u012a\26\147\1\0\1\257\5\147\1\0"+
    "\1\344\24\261\1\u012b\7\261\2\0\1\345\4\0\1\261"+
    "\13\0\1\u012c\34\0\15\40\1\0\2\40\1\u012d\10\40"+
    "\1\0\1\40\10\0\1\40\2\0\10\40\1\u012e\4\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\15\40"+
    "\1\0\1\40\1\u012f\11\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\6\40\1\u012d\4\40\1\0\1\40"+
    "\10\0\1\40\2\0\15\40\1\0\1\u0130\12\40\1\0"+
    "\1\40\10\0\1\40\2\0\22\102\1\u0131\11\102\7\0"+
    "\1\102\2\0\22\102\1\u0132\11\102\7\0\1\102\6\0"+
    "\1\u0133\41\0\12\40\1\274\2\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\4\40\1\u0134\10\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\1\40\1\u0135"+
    "\13\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\7\40\1\153\5\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\11\40\1\153\1\40\1\0"+
    "\1\40\10\0\1\40\37\u012a\1\0\1\u0136\5\u012a\1\0"+
    "\1\344\6\261\1\u0137\25\261\2\0\1\345\4\0\1\261"+
    "\14\0\1\u0138\33\0\1\40\1\u011f\12\40\1\u0139\1\0"+
    "\1\40\1\u013a\2\40\1\u0120\6\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\5\40\1\u013b\5\40\1\0"+
    "\1\40\10\0\1\40\2\0\10\40\1\u013c\4\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\24\102\1\203"+
    "\7\102\7\0\1\102\2\0\17\102\1\204\14\102\7\0"+
    "\1\102\4\0\1\u013d\43\0\2\40\1\u013e\12\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\1\40\1\u013e"+
    "\13\40\1\0\13\40\1\0\1\40\10\0\1\40\1\0"+
    "\1\u013f\34\261\2\0\1\u0140\4\0\1\261\2\0\15\40"+
    "\1\0\1\40\1\u0141\11\40\1\0\1\40\10\0\1\40"+
    "\2\0\15\40\1\0\4\40\1\u0142\2\40\1\u0143\3\40"+
    "\1\0\1\40\10\0\1\40\2\0\11\40\1\u012d\3\40"+
    "\1\0\13\40\1\0\1\40\10\0\1\40\2\0\5\40"+
    "\1\u0144\7\40\1\0\13\40\1\0\1\40\10\0\1\40"+
    "\12\0\1\u0138\35\0\1\156\14\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\1\0\1\u013f\36\0\1\u0140\7\0"+
    "\15\40\1\0\7\40\1\u0145\3\40\1\0\1\40\10\0"+
    "\1\40\2\0\6\40\1\u012d\6\40\1\0\13\40\1\0"+
    "\1\40\10\0\1\40\2\0\10\40\1\u0146\4\40\1\0"+
    "\13\40\1\0\1\40\10\0\1\40\2\0\5\40\1\u012d"+
    "\7\40\1\0\13\40\1\0\1\40\10\0\1\40\2\0"+
    "\10\40\1\u012d\4\40\1\0\13\40\1\0\1\40\10\0"+
    "\1\40\2\0\15\40\1\0\1\u012d\12\40\1\0\1\40"+
    "\10\0\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\11\1\1\1\11\12\1\1\11\20\1\2\11"+
    "\1\1\2\11\53\1\5\0\10\1\1\0\1\11\11\1"+
    "\1\0\1\11\1\0\57\1\3\0\60\1\2\0\1\11"+
    "\2\0\21\1\1\0\2\1\1\0\7\1\3\0\12\1"+
    "\1\0\10\1\3\0\7\1\1\0\5\1\3\0\6\1"+
    "\1\0\3\1\1\0\1\11\4\1\1\0\1\1\1\0"+
    "\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiHtmlTagLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiHtmlTagLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { // ignore whitespace
        return "";
          }
        case 23: break;
        case 16: 
          { boolean isFinished = ((yychar + this.yytext().length()) == this.html.length());
        if (!isFinished) {
            return "";
        }
        // tag close, done
        endState();
        this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        return this.closeTag();
          }
        case 24: break;
        case 10: 
          { this.tagType = yytext().toLowerCase();
        if (this.tagType.equals("br") || this.tagType.equals("hr")) {
            // handle invalid tags of the form </br> or </hr>
            this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        }
        return "";
          }
        case 25: break;
        case 13: 
          { endState();
        this.tagType = yytext().toLowerCase();
        if (this.tagType.equals("div")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("p")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("h1") || this.tagType.equals("h2") || this.tagType.equals("h3") || this.tagType.equals("h4") || this.tagType.equals("h5") || this.tagType.equals("h6")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("center")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("span")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("em")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("strong")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("code")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("var")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("cite")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("abbr")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("sub")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("sup")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tt")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("i")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("b")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("big")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("small")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("u")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("s")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("strike")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("font")) {
            beginState(FONT_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("pre")) {
            beginState(PRE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("br")) {
            beginState(BR_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("hr")) {
            beginState(HR_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("blockquote")) {
            beginState(BLOCKQUOTE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ul")) {
            beginState(UL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ol")) {
            beginState(OL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dl")) {
            beginState(DL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("li")) {
            beginState(LI_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dd")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dt")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("table")) {
            beginState(TABLE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tr")) {
            beginState(TABLE_ROW_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("td")) {
            beginState(TABLE_CELL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("th")) {
            beginState(TABLE_CELL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tbody")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("thead")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tfoot")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("caption")) {
            beginState(TABLE_CAPTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("col")) {
            beginState(TABLE_COL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("colgroup")) {
            beginState(TABLE_COL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("del")) {
            beginState(INS_DEL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ins")) {
            beginState(INS_DEL_ATTRIBUTE_KEY);
        } else {
            logger.info("Unknown tag type: " + this.html);
        }
        if (this.tagType.equals("br") || this.tagType.equals("col") || this.tagType.equals("hr")) {
            // these tags may not have content, so explicitly set to empty body
            this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        }
        return "";
          }
        case 26: break;
        case 15: 
          { this.initializeCurrentAttribute(yytext());
        return "";
          }
        case 27: break;
        case 14: 
          { // non-HTML tag, such as <gallery>
        endState();
        this.tagType = yytext().toLowerCase();
        beginState(NON_HTML_ATTRIBUTE_KEY);
        return "";
          }
        case 28: break;
        case 3: 
          { // invalid attribute
        return "";
          }
        case 29: break;
        case 11: 
          { endState();
        return this.closeTag();
          }
        case 30: break;
        case 8: 
          { throw new IllegalArgumentException("HTML_CLOSE: Invalid HTML tag: " + this.html);
          }
        case 31: break;
        case 17: 
          { endState();
        if (!allowJavascript() && yytext().indexOf("javascript") != -1) {
            // potential XSS attack, drop this attribute
            this.removeAttribute(this.currentAttributeKey);
        } else {
            // strip the quotation marks (they will be re-added later)
            this.addAttribute(this.currentAttributeKey, yytext().substring(1, yytext().length() - 1));
        }
        this.currentAttributeKey = null;
        return "";
          }
        case 32: break;
        case 12: 
          { throw new IllegalArgumentException("HTML_OPEN: Invalid HTML tag: " + this.html);
          }
        case 33: break;
        case 2: 
          { // ignore whitespace and any other characters
        return "";
          }
        case 34: break;
        case 18: 
          { this.initialize(HtmlTagItem.Pattern.OPEN);
        yypushback(this.html.length() - 1);
        beginState(HTML_OPEN);
        return "";
          }
        case 35: break;
        case 22: 
          { this.initialize(HtmlTagItem.Pattern.CLOSE);
        this.tagType = "script";
        return this.closeTag();
          }
        case 36: break;
        case 7: 
          { // ignore anything that doesn't match
        return "";
          }
        case 37: break;
        case 5: 
          { if (this.currentAttributeKey != null) {
            beginState(HTML_ATTRIBUTE_VALUE);
        }
        return "";
          }
        case 38: break;
        case 21: 
          { this.initialize(HtmlTagItem.Pattern.OPEN);
        int pos = this.yytext().toLowerCase().indexOf("script") + "script".length();
        yypushback(this.html.length() - pos);
        beginState(SCRIPT_ATTRIBUTE_KEY);
        this.tagType = "script";
        return "";
          }
        case 39: break;
        case 1: 
          { throw new IllegalArgumentException("YYINITIAL: Invalid HTML tag: " + yytext());
          }
        case 40: break;
        case 19: 
          { this.initialize(HtmlTagItem.Pattern.CLOSE);
        int pos = this.html.indexOf("/");
        yypushback(this.html.length() - (pos + 1));
        beginState(HTML_CLOSE);
        return "";
          }
        case 41: break;
        case 4: 
          { boolean isFinished = ((yychar + this.yytext().length()) == this.html.length());
        if (!isFinished) {
            return "";
        }
        // tag close, done
        endState();
        return this.closeTag();
          }
        case 42: break;
        case 6: 
          { endState();
        if (!allowJavascript() && yytext().indexOf("javascript") != -1) {
            // potential XSS attack, drop this attribute
            this.removeAttribute(this.currentAttributeKey);
        } else {
            // add quotes
            this.addAttribute(this.currentAttributeKey, yytext());
        }
        this.currentAttributeKey = null;
        return "";
          }
        case 43: break;
        case 20: 
          { if (allowJavascript()) {
            this.initializeCurrentAttribute(yytext());
        }
        return "";
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

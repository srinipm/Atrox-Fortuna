/* The following code was generated by JFlex 1.4.3 on 16-10-14 ÏÂÎç9:52 */

/*
 * This processor runs after the template processor and before the pre-processor
 * and converts XML-like custom tags to standard wiki syntax.  For example, if
 * a custom "bold" tag were to be created with syntax of the form
 * "<bold>text</bold>", then this processor would initialize an instance of the
 * "bold" tag processor, pass it the tags attributes and content, and most likely
 * return an output of the form "'''bold'''".
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16-10-14 ÏÂÎç9:52 from the specification file
 * <tt>D:/work/jamwiki/jamwiki-core/src/main/jflex/jamwiki-custom-tag-processor.jflex</tt>
 */
public class JAMWikiCustomTagLexer extends AbstractJAMWikiCustomTagLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\25\1\0\1\0\23\0\1\23\16\0\1\10\14\0"+
    "\1\1\1\24\1\7\2\0\1\13\1\0\1\11\1\15\1\22\1\0"+
    "\1\17\1\0\1\5\1\0\1\6\1\12\1\0\1\2\1\3\1\26"+
    "\1\0\1\16\1\14\1\20\2\0\1\4\1\0\1\21\7\0\1\13"+
    "\1\0\1\11\1\15\1\22\1\0\1\17\1\0\1\5\1\0\1\6"+
    "\1\12\1\0\1\2\1\3\1\26\1\0\1\16\1\14\1\20\2\0"+
    "\1\4\1\0\1\21\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\4\0\1\2\5\0\1\3\1\0\1\4"+
    "\2\0\1\2\5\0\1\3\16\0\1\2\20\0\1\5"+
    "\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\27"+
    "\0\241\0\270\0\317\0\346\0\375\0\27\0\u0114\0\27"+
    "\0\u012b\0\u0142\0\u0159\0\u0170\0\u0187\0\u019e\0\u0159\0\u01b5"+
    "\0\u0159\0\u01cc\0\u01e3\0\u01fa\0\u0211\0\u0228\0\u023f\0\u0256"+
    "\0\u026d\0\u0284\0\u029b\0\u02b2\0\u02c9\0\u02e0\0\u02f7\0\u030e"+
    "\0\u0325\0\u033c\0\u0353\0\u036a\0\u0381\0\u0398\0\u030e\0\u03af"+
    "\0\u03c6\0\u03dd\0\u03f4\0\u040b\0\u0422\0\u0439\0\u0450\0\u0467"+
    "\0\27\0\u047e\0\u0495\0\u04ac\0\u04c3\0\u04da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\25\2\27\0\2\4\1\5\4\4\1\0"+
    "\1\6\15\4\1\7\7\4\1\10\1\11\21\4\1\12"+
    "\3\4\1\10\1\11\16\4\7\13\1\0\1\14\16\13"+
    "\7\4\1\10\1\11\5\4\1\15\17\4\1\16\1\11"+
    "\22\4\1\17\2\4\1\10\1\11\16\4\7\13\1\20"+
    "\1\14\25\13\1\16\1\14\16\13\7\4\1\10\1\11"+
    "\11\4\1\21\11\4\1\22\1\4\1\10\1\11\25\4"+
    "\1\23\1\24\12\4\1\25\11\4\1\26\1\10\1\11"+
    "\16\4\1\27\1\30\25\27\7\4\1\31\1\11\23\4"+
    "\1\32\1\4\1\23\1\24\1\33\1\34\1\4\1\35"+
    "\1\36\2\4\1\37\2\4\1\25\10\4\1\40\1\4"+
    "\1\10\1\11\16\4\1\27\1\30\6\27\1\41\16\27"+
    "\7\4\1\10\1\11\4\4\1\42\20\4\1\10\1\11"+
    "\1\4\1\43\23\4\1\10\1\11\2\4\1\44\22\4"+
    "\1\10\1\11\7\4\1\45\13\4\1\46\1\4\1\10"+
    "\1\11\23\4\1\47\1\4\1\10\1\11\25\4\1\50"+
    "\1\11\16\4\1\27\1\30\24\27\1\51\7\4\1\23"+
    "\1\24\12\4\1\52\1\53\11\4\1\10\1\11\2\4"+
    "\1\54\15\4\1\55\4\4\1\10\1\11\25\4\1\10"+
    "\1\11\10\4\1\56\14\4\1\10\1\11\5\4\1\42"+
    "\17\4\1\10\1\11\7\4\1\56\6\4\1\57\1\60"+
    "\25\57\1\27\1\30\14\27\1\61\10\27\5\4\1\32"+
    "\1\4\1\23\1\24\1\33\1\34\1\4\1\35\1\36"+
    "\2\4\1\37\2\4\1\52\1\53\2\4\7\62\1\10"+
    "\1\63\14\62\1\4\1\62\7\4\1\10\1\11\3\4"+
    "\1\64\21\4\1\10\1\11\6\4\1\42\16\4\1\10"+
    "\1\11\1\4\1\65\14\4\1\57\1\60\6\57\1\66"+
    "\16\57\1\27\1\30\20\27\1\67\4\27\7\62\1\23"+
    "\1\63\14\62\1\4\10\62\1\31\1\63\14\62\1\4"+
    "\1\62\7\4\1\10\1\11\3\4\1\42\21\4\1\10"+
    "\1\11\11\4\1\42\4\4\1\57\1\60\1\70\24\57"+
    "\1\27\1\30\5\27\1\71\17\27\1\57\1\60\1\57"+
    "\1\72\24\57\1\60\2\57\1\73\23\57\1\60\3\57"+
    "\1\74\22\57\1\60\4\57\1\75\21\57\1\60\3\57"+
    "\1\76\22\57\1\60\5\57\1\71\17\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\0\1\11\5\0\1\11\1\0"+
    "\1\11\2\0\1\1\5\0\1\1\16\0\1\1\20\0"+
    "\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiCustomTagLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiCustomTagLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { // no need to log this
    return this.processText(yytext());
          }
        case 6: break;
        case 5: 
          { if (logger.isTraceEnabled()) logger.trace("nowiki / htmlpre: " + yytext() + " (" + yystate() + ")");
    return this.processText(yytext());
          }
        case 7: break;
        case 2: 
          { if (logger.isTraceEnabled()) logger.trace("tagopen: " + yytext() + " (" + yystate() + ")");
    return this.parsePossibleCustomTagOpen(yytext());
          }
        case 8: break;
        case 3: 
          { if (logger.isTraceEnabled()) logger.trace("tagnocontent: " + yytext() + " (" + yystate() + ")");
    return this.parsePossibleCustomTagOpen(yytext());
          }
        case 9: break;
        case 4: 
          { if (logger.isTraceEnabled()) logger.trace("tagclose: " + yytext() + " (" + yystate() + ")");
    return this.parsePossibleCustomTagClose(yytext());
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (logger.isTraceEnabled()) logger.trace("EOF (" + yystate() + ")");
    return this.flushCustomTagStack();
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

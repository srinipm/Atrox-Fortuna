/* The following code was generated by JFlex 1.4.3 on 16-10-14 ÏÂÎç9:52 */

/*
 * This class handles references, TOC insertion, and other elements that require
 * pre-processing before they can be fully parsed.
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16-10-14 ÏÂÎç9:52 from the specification file
 * <tt>D:/work/jamwiki/jamwiki-core/src/main/jflex/jamwiki-postprocessor.jflex</tt>
 */
public class JAMWikiPostLexer extends JFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\1\1\0\1\0\23\0\1\31\16\0\1\11\14\0"+
    "\1\2\1\27\1\10\2\0\1\14\1\0\1\20\1\22\1\17\1\30"+
    "\1\23\1\0\1\6\1\0\1\7\1\21\1\0\1\3\1\4\1\13"+
    "\1\0\1\15\1\16\1\24\2\0\1\5\1\0\1\25\5\0\1\12"+
    "\1\0\1\14\1\0\1\20\1\22\1\17\1\30\1\23\1\0\1\6"+
    "\1\0\1\7\1\21\1\0\1\3\1\4\1\13\1\0\1\15\1\16"+
    "\1\24\2\0\1\5\1\0\1\25\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\5\1\30\0\1\2\21\0\1\3\12\0\1\4"+
    "\11\0\1\4\31\0\1\5\7\0\1\6\1\0\1\7"+
    "\5\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\202"+
    "\0\266\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c"+
    "\0\u0186\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0208\0\u0222\0\u023c"+
    "\0\u0256\0\u0270\0\u028a\0\u02a4\0\u02be\0\u02d8\0\u02f2\0\64"+
    "\0\u030c\0\u0326\0\u0340\0\u035a\0\u0374\0\u038e\0\u03a8\0\u03c2"+
    "\0\u03dc\0\u03f6\0\u0410\0\u042a\0\u0444\0\u045e\0\u0478\0\u0492"+
    "\0\u04ac\0\64\0\u04c6\0\u04e0\0\u04fa\0\u0514\0\u052e\0\u0548"+
    "\0\u0562\0\u057c\0\u0596\0\u05b0\0\u05ca\0\u05e4\0\u05fe\0\u0618"+
    "\0\u0632\0\u064c\0\u0666\0\u0680\0\u069a\0\u06b4\0\64\0\u06ce"+
    "\0\u06e8\0\u0702\0\u071c\0\u0736\0\u0750\0\u076a\0\u0784\0\u079e"+
    "\0\u07b8\0\u07d2\0\u07ec\0\u0806\0\u0820\0\u083a\0\u0854\0\u086e"+
    "\0\u0888\0\u08a2\0\u08bc\0\u08d6\0\u08f0\0\u090a\0\u0924\0\u093e"+
    "\0\64\0\u0958\0\u0972\0\u098c\0\u09a6\0\u09c0\0\u09da\0\u09f4"+
    "\0\64\0\u0a0e\0\64\0\u0a28\0\u0a42\0\u0a5c\0\u0a76\0\u0a90"+
    "\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\7\3\1\6\21\3\1\7\27\3"+
    "\44\0\1\10\22\0\1\11\6\0\1\12\1\13\1\0"+
    "\1\14\1\15\25\0\1\16\22\0\1\11\5\0\1\17"+
    "\1\12\23\0\1\20\37\0\1\21\34\0\1\22\33\0"+
    "\1\23\32\0\1\24\35\0\1\25\20\0\1\26\23\0"+
    "\1\27\27\0\1\30\45\0\1\31\42\0\1\32\16\0"+
    "\1\33\20\0\1\34\42\0\1\35\22\0\1\36\27\0"+
    "\1\37\35\0\1\40\1\41\14\0\1\42\2\0\1\42"+
    "\17\0\1\43\20\0\1\44\43\0\1\45\30\0\1\46"+
    "\21\0\1\47\35\0\1\50\26\0\1\40\27\0\1\51"+
    "\1\0\1\40\1\41\4\0\1\52\1\0\1\53\1\54"+
    "\1\55\1\0\1\56\1\0\1\42\2\0\1\42\15\0"+
    "\1\57\27\0\1\60\30\0\1\61\27\0\1\62\27\0"+
    "\1\63\37\0\1\64\37\0\1\65\33\0\1\66\26\0"+
    "\1\67\24\0\1\70\23\0\1\71\31\0\1\72\42\0"+
    "\1\73\36\0\1\74\17\0\1\75\27\0\1\76\36\0"+
    "\1\77\24\0\1\40\1\41\14\0\1\100\1\101\1\0"+
    "\1\100\25\0\1\102\20\0\1\103\20\0\1\104\43\0"+
    "\1\65\40\0\1\102\10\0\1\105\26\0\10\74\1\106"+
    "\21\74\1\0\1\107\30\0\2\76\1\110\27\76\16\0"+
    "\1\111\21\0\1\51\1\0\1\40\1\41\4\0\1\52"+
    "\1\0\1\53\1\54\1\55\1\0\1\56\1\0\1\100"+
    "\1\101\1\0\1\100\1\112\1\0\6\112\1\0\21\112"+
    "\21\0\1\113\26\0\1\114\36\0\1\65\26\0\1\115"+
    "\11\0\2\106\1\116\27\106\2\76\1\110\6\76\1\117"+
    "\20\76\17\0\1\120\12\0\1\112\1\0\6\112\1\40"+
    "\21\112\17\0\1\65\30\0\1\65\32\0\1\121\12\0"+
    "\2\106\1\116\6\106\1\122\20\106\2\76\1\110\1\123"+
    "\26\76\10\0\1\124\37\0\1\125\13\0\2\106\1\116"+
    "\13\106\1\126\13\106\2\76\1\110\1\76\1\127\25\76"+
    "\2\124\1\130\27\124\31\0\1\131\2\106\1\116\15\106"+
    "\1\132\11\106\2\76\1\110\2\76\1\133\24\76\2\124"+
    "\1\130\6\124\1\134\20\124\11\0\1\135\20\0\2\106"+
    "\1\116\12\106\1\136\14\106\2\76\1\110\3\76\1\137"+
    "\23\76\2\124\1\130\7\124\1\140\17\124\10\0\1\141"+
    "\21\0\2\106\1\116\3\106\1\142\23\106\2\76\1\110"+
    "\4\76\1\143\22\76\2\124\1\130\7\124\1\144\17\124"+
    "\2\106\1\116\10\106\1\145\16\106\2\76\1\110\3\76"+
    "\1\146\23\76\2\124\1\130\1\147\26\124\2\106\1\116"+
    "\21\106\1\150\5\106\2\76\1\110\5\76\1\151\21\76"+
    "\2\124\1\130\1\124\1\152\25\124\2\106\1\116\5\106"+
    "\1\153\21\106\2\124\1\130\10\124\1\154\20\124\1\130"+
    "\11\124\1\155\17\124\1\130\12\124\1\156\16\124\1\130"+
    "\13\124\1\157\15\124\1\130\14\124\1\160\14\124\1\130"+
    "\5\124\1\161\21\124";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\30\0\1\11\21\0\1\11\12\0"+
    "\1\1\11\0\1\11\31\0\1\11\7\0\1\11\1\0"+
    "\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiPostLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiPostLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { if (logger.isTraceEnabled()) logger.trace("toc: " + yytext() + " (" + yystate() + ")");
        return this.parserInput.getTableOfContents().attemptTOCInsertion(this.parserInput, yytext());
          }
        case 9: break;
        case 3: 
          { if (logger.isTraceEnabled()) logger.trace("htmlpreend: " + yytext() + " (" + yystate() + ")");
        endState();
        return yytext();
          }
        case 10: break;
        case 1: 
          { // no need to log this
        return yytext();
          }
        case 11: break;
        case 7: 
          { if (logger.isTraceEnabled()) logger.trace("javascript: " + yytext() + " (" + yystate() + ")");
        // javascript tags are parsed in the processor step, but parse again here as a security
        // check against potential XSS attacks.
        return this.parse(TAG_TYPE_JAVASCRIPT, yytext());
          }
        case 12: break;
        case 6: 
          { if (logger.isTraceEnabled()) logger.trace("nowiki: " + yytext() + " (" + yystate() + ")");
        return JFlexParserUtil.tagContent(yytext());
          }
        case 13: break;
        case 5: 
          { if (logger.isTraceEnabled()) logger.trace("references: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_WIKI_REFERENCES, yytext());
          }
        case 14: break;
        case 2: 
          { if (logger.isTraceEnabled()) logger.trace("htmlprestart: " + yytext() + " (" + yystate() + ")");
        beginState(PRE);
        return yytext();
          }
        case 15: break;
        case 8: 
          { if (logger.isTraceEnabled()) logger.trace("noparse: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_NO_PARSE, yytext());
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
